import { LightningElement, track } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

// APEX
import listRequestedOutOfPlanVM
    from '@salesforce/apex/OutOfPlanAdminService.listRequestedOutOfPlanVM';
import approveOutOfPlan
    from '@salesforce/apex/OutOfPlanAdminService.approveOutOfPlan';

import getSlotStatus
    from '@salesforce/apex/OutOfPlanAdminService.getSlotStatus';

import getFixedWeightOptions
    from '@salesforce/apex/OutOfPlanAdminService.getFixedWeightOptions';

const STATUS = {
    PENDING: 'PENDING',
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED'
};

export default class ScrapOutOfPlanSlotsPanel extends LightningElement {
    // ===== –î–ê–ù–Ü =====
    @track rows = [];          // –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä—è–¥–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ
    @track isLoading = false;  // —Å–ø—ñ–Ω–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    @track isSending = false;

    @track fixedWeightOptions = [];

    // ===== –§—ñ–ª—å—Ç—Ä–∏ UI =====
    @track statusFilter = 'ALL';
    statusOptions = [
        { label: '–£—Å—ñ', value: 'ALL' },
        { label: '–û—á—ñ–∫—É—î', value: STATUS.PENDING },
        { label: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ', value: STATUS.APPROVED },
        { label: '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ', value: STATUS.REJECTED }
    ];
    @track query = '';

    // ===== –ú–æ–¥–∞–ª–∫–∞ =====
    @track isModalOpen = false;
    @track selected = null;

    // ===== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è =====
    connectedCallback() {
        // this.loadRows();
        Promise.all([ this.loadRows(), this.loadFixedWeightOptions() ]).catch(()=>{});
    }

    async loadFixedWeightOptions() {
        try {
            const opts = await getFixedWeightOptions(); // –æ—á—ñ–∫—É—î–º–æ ['10','20','25'] –∞–±–æ [{label,value}]
            // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–æ combobox-—Ñ–æ—Ä–º–∞—Ç—É
            this.fixedWeightOptions = (opts || []).map(o => {
                if (typeof o === 'object' && o.value) return o;         // —É–∂–µ {label,value}
                const v = String(o);
                return { label: `${v} —Ç.`, value: v };
            });
            // fallback (–Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫)
            if (!this.fixedWeightOptions.length) {
                this.fixedWeightOptions = [{label:'10 —Ç.',value:'10'},{label:'20 —Ç.',value:'20'},{label:'25 —Ç.',value:'25'}];
            }
        } catch(e) {
            // –∑–∞–ø–∞—Å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ Apex –≤–ø–∞–≤
            this.fixedWeightOptions = [{label:'10 —Ç.',value:'10'},{label:'20 —Ç.',value:'20'},{label:'25 —Ç.',value:'25'}];
            // –º–æ–∂–Ω–∞ —Ç–∏—Ö–æ, –∞–±–æ —Ç–æ—Å—Ç–æ–º ‚Äî —è–∫ –∑—Ä—É—á–Ω–æ
            // this.dispatchEvent(new ShowToastEvent({ title:'–£–≤–∞–≥–∞', message:'–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø—Ü—ñ—ó —Ç–æ–Ω–Ω–∞–∂—É', variant:'warning'}));
        }
    }


    async loadRows() {
        this.isLoading = true;
        try {
            // –ø—Ä–æ—Å—Ç–∏–π –≤–∏–∫–ª–∏–∫ –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ ‚Äî —É—Å–µ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ
            const data = await listRequestedOutOfPlanVM({
                supplierIdFilter: null,
                scrapTypeFilter: null,
                dateFrom: null,
                dateTo: null
            });

            // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –ø—ñ–¥ —à–∞–±–ª–æ–Ω (–Ω–∞–∑–≤–∏ –ø–æ–ª—ñ–≤ –∑ Apex ‚Üí –ø—ñ–¥ —Ç–≤–æ—ó –∫–æ–ª–æ–Ω–∫–∏)
            this.rows = (data || []).map(r => this.mapApexRow(r));
        } catch (e) {
            // –ü–æ–∫–∞–∂–µ–º–æ –ø–æ–º–∏–ª–∫—É
            this.dispatchEvent(new ShowToastEvent({
                title: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è',
                message: e?.body?.message || e?.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
                variant: 'error'
            }));
        } finally {
            this.isLoading = false;
        }
    }

    mapApexRow(r) {
        // —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏
        const dateFmt = new Intl.DateTimeFormat('uk-UA', { day: '2-digit', month: '2-digit', year: 'numeric' });
        const uiDate = r.reserveDate ? dateFmt.format(new Date(r.reserveDate)) : '‚Äî';

        const monthLimit = toNum(r.approvedMonth);
        const used       = toNum(r.factMonth);
        const leftMonth  = isNum(r.remainMonth) ? Number(r.remainMonth) : (monthLimit - used);

            // üîπ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ –¥–µ–∫–∞–¥—ñ (–±–µ–∫ —É–∂–µ –≤—ñ–¥–¥–∞—î approvedDec/factDec/remainDec)
          const decLimit = toNum(r.approvedDec);
          const decUsed  = toNum(r.factDec);
          const decLeft  = isNum(r.remainDec) ? Number(r.remainDec) : (decLimit - decUsed);

        const fixedStr = (r.fixedWeight || '').trim();
        const fixedNum = Number(fixedStr || 0);
        // —Å—Ç–∞—Ç—É—Å–∏ –ø–æ–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ñ (—Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î Requested)
        const uiStatus = STATUS.PENDING;

        return {
            // –±–∞–∑–æ–≤–µ
            id: r.slotId,
            date: uiDate,
            supplier: r.supplierName || '‚Äî',
            scrapType: r.scrapTypeName || '‚Äî',
            weight: toNum(r.tonnage),

            // –º—ñ—Å—è—á–Ω—ñ –∞–≥—Ä–µ–≥–∞—Ç–∏
            monthLimit,
            used,
            leftMonth,      // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –¥–æ–ø–æ–º—ñ–∂–Ω–µ

            // –¥–µ–∫–∞–¥–∞
            decLimit, decUsed, decLeft,

            // —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            driverName: r.driverName || '‚Äî',
            driverPhone: r.driverPhone || '‚Äî',
            truckModel: r.truckModel || '‚Äî',
            truckNumber: r.truckNumber || r.truckName || '‚Äî',

            fixedWeightValue: fixedStr || null,         // '10' | '20' | '25' | null
            fixedWeightNumber: isNum(fixedNum) ? fixedNum : 0, // 10 | 20 | 25 | 0

            fixedWeightDisplay: isNum(fixedNum) ? String(fixedNum) : '‚Äî',

            // —Ç–µ—Ö–Ω—ñ—á–Ω–µ
            approvedDetailDecId: r.approvedDetailDecId,
            yearNum: r.yearNum,
            monthNum: r.monthNum,
            decadeNum: r.decadeNum,
            monthId: r.monthId,

            status: uiStatus
        };
    }

    computeLeftMonth = (r) => (isNum(r.leftMonth) ? Number(r.leftMonth) : (r.monthLimit ?? 0) - (r.used ?? 0));
    computeLeftDec   = (r) => (isNum(r.decLeft)   ? Number(r.decLeft)   : (r.decLimit   ?? 0) - (r.decUsed ?? 0));

    computeOverMonthIfAccepted = (r) => {
        const left = this.computeLeftMonth(r);
        const accept = Number(r.fixedWeightNumber ?? 0); // –±—É–ª–æ r.weight
        return accept - Math.max(left, 0);
    };
    computeOverDecIfAccepted = (r) => {
        const left = this.computeLeftDec(r);
        const accept = Number(r.fixedWeightNumber ?? 0); // –±—É–ª–æ r.weight
        return accept - Math.max(left, 0);
    };
    computeOverIfAccepted = (r) => { // –¥–ª—è rowClass
        const left = this.computeLeft(r);
        const accept = Number(r.fixedWeightNumber ?? 0);
        return accept - Math.max(left, 0);
    };



    // ===== Helpers =====
    computeLeft = (r) => {
        // –≤—ñ–¥–¥–∞—î–º–æ —Ç–µ, —â–æ –ø—Ä–∏–π—à–ª–æ –∑ –±–µ–∫–µ–Ω–¥–∞, –∞–±–æ —Ä–∞—Ö—É—î–º–æ
        if (isNum(r.leftMonth)) return Number(r.leftMonth);
        return (r.monthLimit ?? 0) - (r.used ?? 0);
    };
    // computeOverIfAccepted = (r) => {
    //     const left = this.computeLeft(r);
    //     const accept = r.weight ?? 0; // —É —Ç–∞–±–ª–∏—Ü—ñ ‚Äî "—è–∫—â–æ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –≤–µ—Å—å –∑–∞–ø–∏—Ç–∞–Ω–∏–π —Ç–æ–Ω–Ω–∞–∂"
    //     return accept - Math.max(left, 0);
    // };

    formatSigned(n) {
        if (!isNum(n)) return '‚Äî';
        return Number(n).toString();
    }
    leftClass(n) {
        if (n < 0) return 'num neg';
        if (n === 0) return 'num zero';
        return 'num';
    }
    overClass(n) {
        if (n > 0) return 'num danger';
        if (n === 0) return 'num zero';
        return 'num';
    }
    statusLabel(st) {
        switch (st) {
            case STATUS.PENDING:  return '–û—á—ñ–∫—É—î';
            case STATUS.APPROVED: return '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ';
            case STATUS.REJECTED: return '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ';
            default: return st || '‚Äî';
        }
    }
    statusBadgeClass(st) {
        switch (st) {
            case STATUS.PENDING:  return 'badge badge-pending';
            case STATUS.APPROVED: return 'badge badge-approved';
            case STATUS.REJECTED: return 'badge badge-rejected';
            default: return 'badge';
        }
    }
    rowClass = (r) => {
        if (r.status === STATUS.APPROVED) return 'row-approved';
        if (r.status === STATUS.REJECTED) return 'row-rejected';
        const over = this.computeOverIfAccepted(r);
        return over > 0 ? 'row-changed' : '';
    };

    // ===== –í–∏—Ä–∞—Ö—É–≤–∞–Ω—ñ —Ä—è–¥–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ =====
    // get visibleRows() {
    //     const q = (this.query || '').trim().toLowerCase();
    //     return (this.rows || [])
    //         .filter(r => this.statusFilter === 'ALL' || r.status === this.statusFilter)
    //         .filter(r => {
    //             if (!q) return true;
    //             const hay = [
    //                 r.supplier, r.scrapType, r.driverName, r.driverPhone, r.truckNumber, r.truckModel
    //             ].join(' ').toLowerCase();
    //             return hay.includes(q);
    //         })
    //         .map(r => {
    //             const left = this.computeLeft(r);
    //             const over = this.computeOverIfAccepted(r);
    //             return {
    //                 ...r,
    //                 statusLabel: this.statusLabel(r.status),
    //                 statusBadgeClass: this.statusBadgeClass(r.status),
    //                 rowClass: this.rowClass(r),
    //                 leftDisplay: this.formatSigned(left),
    //                 leftClass: this.leftClass(left),
    //                 overDisplay: over > 0 ? `+${over}` : `${over}`,
    //                 overClass: this.overClass(over)
    //             };
    //         });
    // }

    get visibleRows() {
        const q = (this.query || '').trim().toLowerCase();
        return (this.rows || [])
            .filter(r => this.statusFilter === 'ALL' || r.status === this.statusFilter)
            .filter(r => {
                if (!q) return true;
                const hay = [r.supplier, r.scrapType, r.driverName, r.driverPhone, r.truckNumber, r.truckModel]
                    .join(' ').toLowerCase();
                return hay.includes(q);
            })
            .map(r => {
                // –ú–Ü–°–Ø–¶–¨
                const leftM = this.computeLeftMonth(r);
                const overM = this.computeOverMonthIfAccepted(r);
                // –î–ï–ö–ê–î–ê
                const leftD = this.computeLeftDec(r);
                const overD = this.computeOverDecIfAccepted(r);

                return {
                    ...r,
                    statusLabel: this.statusLabel(r.status),
                    statusBadgeClass: this.statusBadgeClass(r.status),

                    // –º—ñ—Å—è—Ü—å
                    leftDisplay: this.formatSigned(leftM),
                    leftClass: this.leftClass(leftM),
                    overDisplay: overM > 0 ? `+${overM}` : `${overM}`,
                    overClass: this.overClass(overM),

                    // –¥–µ–∫–∞–¥–∞
                    decLeftDisplay: this.formatSigned(leftD),
                    decLeftClass: this.leftClass(leftD),
                    decOverDisplay: overD > 0 ? `+${overD}` : `${overD}`,
                    decOverClass: this.overClass(overD),

                    // –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ ‚Äî —è–∫—â–æ —î ‚Äú–ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è‚Äù —Ö–æ—á–∞ –± –ø–æ –æ–¥–Ω–æ–º—É –∑ –≤–∏–º—ñ—Ä—ñ–≤
                    rowClass: (r.status === STATUS.APPROVED) ? 'row-approved'
                        : (r.status === STATUS.REJECTED) ? 'row-rejected'
                            : ((overM > 0 || overD > 0) ? 'row-changed' : '')
                };
            });
    }

    get selDecLeft(){
        return this.selected ? this.computeLeftDec(this.selected) : 0;
    }
    get selDecLeftDisplay(){
        return this.formatSigned(this.selDecLeft);
    }
    get selDecLeftClass(){
        return this.leftClass(this.selDecLeft);
    }
    get selDecOverApproved(){
        if (!this.selected) return 0;
        const left = this.computeLeftDec(this.selected);
        return this.selApprovedWeight - Math.max(left, 0);
    }
    get selDecOverDisplay(){
        const n = this.selDecOverApproved; return n > 0 ? `+${n}` : `${n}`;
    }
    get selDecOverClass(){
        return this.overClass(this.selDecOverApproved);
    }

// —è–∫—â–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è —î –∞–±–æ –ø–æ –º—ñ—Å—è—Ü—é, –∞–±–æ –ø–æ –¥–µ–∫–∞–¥—ñ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∞–ª–µ—Ä—Ç
    get hasOverLimit(){
        return this.selOverApproved > 0 || this.selDecOverApproved > 0;
    }



    // ===== –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ =====
    handleStatusFilterChange(e) { this.statusFilter = e.detail.value; }
    handleQueryChange(e)       { this.query = e.target.value; }

    // ===== –ú–æ–¥–∞–ª–∫–∞ =====
    openModal(e) {
        const index = Number(e.currentTarget.dataset.index);
        const row = this.visibleRows[index];
        const realIndex = this.rows.findIndex(x => x.id === row.id);

        const base = JSON.parse(JSON.stringify(this.rows[realIndex]));

        // —è–∫—â–æ —É —Å–ª–æ—Ç–∞ –≤–∂–µ —î FixedWeight__c ‚Äî –±–µ—Ä–µ–º–æ –π–æ–≥–æ,
        // —ñ–Ω–∞–∫—à–µ ‚Äî –ø–µ—Ä—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø—ñ–∫–ª—ñ—Å—Ç–∞ (–∞–±–æ weight, —è–∫—â–æ —Å–ø—ñ–≤–ø–∞–¥–∞—î)
        let initial = base.fixedWeightValue || null;
        if (!initial && this.fixedWeightOptions.length) {
            const w = String(base.weight ?? '');
            initial = this.fixedWeightOptions.some(o => o.value === w) ? w : this.fixedWeightOptions[0].value;
            // initial = this.fixedWeightOptions[0].value;

        }

        this.selected = { ...base, index: realIndex, fixedWeightValue: initial, requestedFixedWeight: base.fixedWeightValue || initial };
        this.isModalOpen = true;
    }

    // –°–∫—ñ–ª—å–∫–∏ –¥–æ–∑–≤–æ–ª—è—î–º–æ ‚Äî —Ü–µ –≤–∏–±—ñ—Ä –∑ –ø—ñ–∫–ª—ñ—Å—Ç–∞ (—á–∏—Å–ª–æ–º)
    get selFixedWeight() {
        return this.selected ? (this.selected.fixedWeightValue ?? null) : null; // '10'|'20'|'25'|null
    }
    get selApprovedWeight() {
        return Number(this.selFixedWeight || 0); // —á–∏—Å–ª–æ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
    }
    get selRequestedWeight() {
        if (!this.selected) return 0;
        return Number(this.selected.requestedFixedWeight || 0);
    }

    closeModal() {
        this.isModalOpen = false;
        this.selected = null;
    }

    get approvedPillClass(){
        if(!this.selected) return 'pill pill-neutral';
        return (this.selApprovedWeight < this.selRequestedWeight)
            ? 'pill pill-warning'
            : 'pill pill-ok';
    }

    get selFixedOptions() {
        // –ø–æ–∫–∞–∑—É—î–º–æ 10/20/25 —è–∫ —î, –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –∑–∞ ‚Äú–≤–∞–≥–æ—é –∞–≤—Ç–æ–º–æ–±—ñ–ª—è‚Äù
        return this.fixedWeightOptions;
    }


    get selLeft(){
        return this.selected ? this.computeLeft(this.selected) : 0;
    }
    get selLeftDisplay(){
        const n = this.selLeft; return this.formatSigned(n);
    }
    get selLeftClass(){
        const n = this.selLeft; return this.leftClass(n);
    }
    get selOverApproved(){
        if(!this.selected) return 0;
        const left = this.computeLeft(this.selected);
        return this.selApprovedWeight - Math.max(left, 0);
    }
    get selOverDisplay(){
        const n = this.selOverApproved; return n > 0 ? `+${n}` : `${n}`;
    }
    get selOverClass(){
        const n = this.selOverApproved; return this.overClass(n);
    }
    // get hasOverLimit(){ return this.selOverApproved > 0; }

    handleApprovedWeightChange = (e) => {
        if (!this.selected) return;

        const val = String(e.detail?.value ?? e.target?.value ?? '');
        const isValid = this.fixedWeightOptions.some(o => o.value === val);

        // —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑ –ø–µ—Ä–µ–ª—ñ–∫—É ‚Äî –Ω–µ –ø—Ä–∏–π–º–∞—î–º–æ
        this.selected = {
            ...this.selected,
            fixedWeightValue: isValid ? val : null
        };
    };

    pollTimer = null;
    POLL_INTERVAL = 2500;  // 2.5s
    POLL_TIMEOUT  = 120000; // 2 —Ö–≤
    pollStartedAt = 0;

    disconnectedCallback(){
        if (this.pollTimer){ clearInterval(this.pollTimer); this.pollTimer = null; }
    }

    // ===== –î—ñ—ó (–ø–æ–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ñ; –±–µ–∫–µ–Ω–¥-–µ–Ω–¥–ø–æ–π–Ω—Ç–∏ –º–æ–∂–Ω–∞ –ø—ñ–¥–≤‚Äô—è–∑–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ) =====
    async handleApprove() {
        if (!this.selected) return;

        const chosen = this.selFixedWeight;
        if (!chosen) {
            this.dispatchEvent(new ShowToastEvent({
                title:'–ù–µ –æ–±—Ä–∞–Ω–æ —Ç–æ–Ω–Ω–∞–∂',
                message:'–í–∏–±–µ—Ä—ñ—Ç—å ¬´–î–æ–∑–≤–æ–ª–∏—Ç–∏ –¥–æ –ø—Ä–∏–π–º–∞–Ω–Ω—è, —Ç¬ª.',
                variant:'warning'
            }));
            return;
        }

        this.isSending = true;        // –ø–æ–∫–∞–∑—É—î–º–æ –æ–≤–µ—Ä–ª–µ–π-—Å–ø—ñ–Ω–µ—Ä —É –º–æ–¥–∞–ª—Ü—ñ
        try {
            // 1) —Ç—Ä–∏–≥–µ—Ä–∏–º–æ Apex, —è–∫–∏–π –û–ù–û–í–ò–¢–¨ —Å–ª–æ—Ç —ñ –ó–ê–ü–£–°–¢–ò–¢–¨ —á–µ—Ä–≥—É
            await approveOutOfPlan({ slotId: this.selected.id, fixedWeightValue: chosen });

            // 2) –ø–æ—á–∏–Ω–∞—î–º–æ –ø—É–ª–∏—Ç–∏ —Å—Ç–∞–Ω —Å–ª–æ—Ç–∞ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
            this.pollStartedAt = Date.now();
            const slotId = this.selected.id;

            this.pollTimer = setInterval(async () => {
                try{
                    const s = await getSlotStatus({ slotId });
                    const approved = s && s.Status__c === 'Approved' && s.PassNumber__c;

                    const expired  = (Date.now() - this.pollStartedAt) > this.POLL_TIMEOUT;
                    // const errored  = s && s.Status__c === 'Error';

                    if (approved) {
                        clearInterval(this.pollTimer); this.pollTimer = null;
                        this.isSending = false;

                        // –æ–Ω–æ–≤–∏–º–æ —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—ñ
                        const allow = this.selApprovedWeight; // 10/20/25 —è–∫ —á–∏—Å–ª–æ
                        const list = [...this.rows];
                        const idx  = this.selected.index;
                        const row  = { ...list[idx] };

                        row.status           = 'APPROVED';
                        row.fixedWeightValue   = chosen;                       // '10' | '20' | '25'
                        row.fixedWeightNumber  = this.selApprovedWeight;       // 10 | 20 | 25
                        row.fixedWeightDisplay = String(this.selApprovedWeight);

                        row.used    = (row.used    ?? 0) + allow;
                        row.decUsed = (row.decUsed ?? 0) + allow;
                        row.decLeft = (row.decLeft ?? 0) - allow;
                        if (isNum(row.leftMonth)) row.leftMonth = Number(row.leftMonth) - allow;

                        list[idx] = row;
                        this.rows = list;

                        this.isModalOpen = false;

                        this.dispatchEvent(new ShowToastEvent({
                            title:'–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
                            message:`–°–ª–æ—Ç ${row.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ü–µ—Ä–µ–ø—É—Å—Ç–∫–∞: ${s.PassNumber__c || '‚Äî'}.`,
                            variant:'success'
                        }));

                        await this.loadRows();   // ‚Üê –û–ù–û–í–ò–¢–ò –°–ü–ò–°–û–ö

                    } else if (expired) {
                        clearInterval(this.pollTimer); this.pollTimer = null;
                        this.isSending = false;
                        this.dispatchEvent(new ShowToastEvent({
                            title:'–î–æ–≤–≥–æ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                            message:'ERP —â–µ –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–µ—Ä–µ–ø—É—Å—Ç–∫—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –æ–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É.',
                            variant:'warning'
                        }));
                    }
                } catch(e){
                    // –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –∑—É–ø–∏–Ω—è—î–º–æ—Å—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø—É–ª—ñ–Ω–≥—É
                    clearInterval(this.pollTimer); this.pollTimer = null;
                    this.isSending = false;
                    this.dispatchEvent(new ShowToastEvent({
                        title:'–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É',
                        message: e?.body?.message || e?.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
                        variant:'error'
                    }));
                }
            }, this.POLL_INTERVAL);

        } catch (e) {
            this.isSending = false;
            this.dispatchEvent(new ShowToastEvent({
                title:'–ü–æ–º–∏–ª–∫–∞',
                message:e?.body?.message || e?.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤ ERP.',
                variant:'error'
            }));
        }
    }


    // get selFixedOptions() {
    //     if (!this.selected) return this.fixedWeightOptions;
    //     const max = Number(this.selected.weight) || Infinity;
    //     return (this.fixedWeightOptions || []).filter(o => Number(o.value) <= max);
    // }



    handleReject(){
        if(!this.selected) return;

        const list = [...this.rows];
        list[this.selected.index] = {
            ...this.selected,
            status: STATUS.REJECTED
        };
        this.rows = list;
        this.isModalOpen = false;

        this.dispatchEvent(new ShowToastEvent({
            title: '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ',
            message: `–°–ª–æ—Ç ${this.selected.id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.`,
            variant: 'warning'
        }));
    }
}

// ==== –ª–æ–∫–∞–ª—å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ ====
function isNum(v){ return v !== null && v !== undefined && !Number.isNaN(Number(v)); }
function toNum(v){ return isNum(v) ? Number(v) : 0; }