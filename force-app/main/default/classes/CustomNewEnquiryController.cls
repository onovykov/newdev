public without sharing class CustomNewEnquiryController {
    @AuraEnabled
    public static List<RecordTypesWrapper> getCustomerEnquiryRecTypes() {
        Schema.DescribeSObjectResult customerEnquiryDesc = CustomerEnquiry__c.SObjectType.getDescribe();
        List<Schema.RecordTypeInfo> customerEnquiryDescInfo = customerEnquiryDesc.getRecordTypeInfos();
        List<RecordTypesWrapper> recTypesInfo = new List<RecordTypesWrapper>();
        
        for(Schema.RecordTypeInfo rti : customerEnquiryDescInfo){
            if(rti.isActive() && !rti.isMaster() && rti.isAvailable()){
                RecordTypesWrapper rtw = new RecordTypesWrapper();
                rtw.value = rti.getRecordTypeId();
                rtw.label = rti.getName();
                rtw.developerName = rti.getDeveloperName();
                recTypesInfo.add(rtw);
            }   
        }
        
        return recTypesInfo;
    }
    
    @AuraEnabled(cacheable=true)
    public static PrepolutateWrapper getContactMailingCountry(Id customerUserId) {
        
        PrepolutateWrapper prepolutatedFieldValues = new PrepolutateWrapper();
        
        User customerUser = [SELECT Id, Contact.AccountId, Contact.Account.OwnerId, Contact.MailingCountry FROM User WHERE Id =: customerUserId];
                   
        String mailingCountryName = customerUser.Contact.MailingCountry;
        Id mailingCountryId;
        
        if(mailingCountryName!=null){
        mailingCountryId = [SELECT Id, Name  FROM Country__c WHERE Name =: mailingCountryName].Id;    
        }
               
        Id managerId = customerUser.Contact.Account.OwnerId;
        id contactAccId = customerUser.Contact.AccountId;
        
        prepolutatedFieldValues.contactAccId = customerUser.Contact.AccountId;
        if(String.isNotBlank(mailingCountryId) && String.isNotBlank(managerId)){
            prepolutatedFieldValues.mailingCountryId = mailingCountryId;
            prepolutatedFieldValues.managerId = managerId;
        } else if (String.isNotBlank(managerId)){          
            prepolutatedFieldValues.managerId = managerId;
        }
        system.debug(prepolutatedFieldValues);
        return prepolutatedFieldValues;
    }

    // @AuraEnabled(cacheable=true)
    @AuraEnabled
    public static BusinessDivisionWrapper getBusinessDivision(Id customerUserId) {
        BusinessDivisionWrapper businessDivisionWrapper = new BusinessDivisionWrapper();
        System.debug('customerUserId : ' + customerUserId);
                   
        String idContactUser = [SELECT Contactid FROM User WHERE Id =: customerUserId LIMIT 1].contactid;
        System.debug('idContactUser : ' + idContactUser);
        String accId = [SELECT id, AccountId FROM Contact WHERE id =: idContactUser LIMIT 1].AccountId;
        System.debug('accId : ' + accId);
        AccountContactRelation accContactRelationship = [SELECT id, BusinessDivision__c, All_Divisions__c FROM AccountContactRelation WHERE AccountId = :accId AND ContactId = :idContactUser];
        System.debug('accContactRelationship : ' + accContactRelationship);

        businessDivisionWrapper.businessDivision = accContactRelationship.BusinessDivision__c;
        businessDivisionWrapper.allDivisions = accContactRelationship.All_Divisions__c;

        return businessDivisionWrapper;
    }
    
    
    // @AuraEnabled
    // public static String getUserDivision(Id userId){
    //     String userDivision = ' ';
    //     User currentUser  = [SELECT tolabel(SalesDivision__c) FROM User WHERE id=:userId LIMIT 1];
    //     userDivision = currentUser.SalesDivision__c;
    //     return userDivision;
    // }
    
    // @AuraEnabled(cacheable=true)
    // public static List<WrapperTableInfo> getRemainProducts(){
    //    List<WrapperTableInfo> tabInfo = new List<WrapperTableInfo>();
    //    List<Remain_Products__c> remainProducts = [SELECT Pos_ITE_Number__c, Product__c, Product__r.Name, Product_Standard__r.Name,Steel_Grade__r.Name,Tube_OD__r.Name,Tube_WT__r.Name,Length_Max_mm__c,
    //                                               Length_Min_mm__c,Quantity_tons__c,Product_Standard__c,Steel_Grade__c,Tube_Length_Size__c,Tube_OD__c,Tube_WT__c FROM Remain_Products__c];
    //     for(Remain_Products__c rp:remainProducts) {
    //         WrapperTableInfo info = new WrapperTableInfo();
    //         info.iTENumber = rp.Pos_ITE_Number__c;
    //         info.prodName = rp.Product__r.Name;
    //         info.productStandard =  rp.Product_Standard__r.Name;
    //         info.steelGrade = rp.Steel_Grade__r.Name;
    //         info.oD = rp.Tube_OD__r.Name;
    //         info.wT = rp.Tube_WT__r.Name;
    //         info.lMin = rp.Length_Max_mm__c;
    //         info.lMax = rp.Length_Min_mm__c;
    //         info.quantity = String.valueof(rp.Quantity_tons__c);
    //         info.choosenQty = 0;
    //         info.Id = rp.id;
    //         info.productId = rp.Product__c;
                                
    //         //lookups
    //         info.tubeWTid = rp.Tube_WT__c;
    //         info.tubeODid = rp.Tube_OD__c;
    //         info.tubeLengthId = rp.Tube_Length_Size__c;
    //         info.tubeSteelGradeId = rp.Steel_Grade__c;
    //         info.tubeStandartId = rp.Product_Standard__c;
            
            
    //         tabInfo.add(info);            
    //     }
    //     return tabInfo;
    // }

    // @AuraEnabled
    // public static String createEnquiryRemainProduct(String enquiryData, String productsData, Id recordTypeId, Id enqId){
    //     system.debug('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   enquiryData' + enquiryData);
    //     system.debug('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   productsData' + productsData);
    //     system.debug('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   recordTypeId' + recordTypeId);
    //     system.debug('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   enqId' + enqId);
    //     List<WrapperTableInfo> prodList = new List<WrapperTableInfo>();
    //     EnquiryData enqData = new EnquiryData();
    //     if (productsData != null) {
    //         prodList = (List<WrapperTableInfo>)JSON.deserialize(productsData, List<WrapperTableInfo>.class);
    //     }
    //     if (enquiryData != null) {
    //         enqData = (EnquiryData)JSON.deserialize(enquiryData, EnquiryData.class);
    //     }

    //     Boolean isRemainProduct = enqId == null ? enqData.isRemainProduct == 'True' : false;
    //     system.debug('enqData-----------------------------------------> ' + enqData);

    //     User currentUser = [SELECT Id, DefaultCurrencyIsoCode, Contact.AccountId  FROM User WHERE Id =: UserInfo.getUserId()];
    //     Pricebook2 pb = [SELECT id, name from Pricebook2 where isStandard = true and CurrencyIsoCode =: currentUser.DefaultCurrencyIsoCode limit 1];
    //     List<PricebookEntry> pbEntriesList = new List<PricebookEntry>();
    //     Map <Id, Id> productToPbEntryMap = new Map<Id, Id>();
    //     Set<Id> productsIds = new Set<Id>();

    //     pbEntriesList = [SELECT Id,Product2Id FROM PricebookEntry WHERE Pricebook2Id =: pb.Id AND isActive = true AND CurrencyIsoCode =: currentUser.DefaultCurrencyIsoCode];
    //     for(PriceBookEntry pe : pbEntriesList) {
    //         productToPbEntryMap.put(pe.Product2Id, pe.Id);
    //     }
        
    //     CustomerEnquiry__c newEnq = new CustomerEnquiry__c();
    //     //Create Enquiry
    //     if (enqId == null) {
    //         newEnq.SalesRepId__c = enqData.managerId;
    //         newEnq.Country__c = enqData.countryId;
    //         newEnq.AccountId__c = currentUser.Contact.Accountid;
    //         insert newEnq;
    //     } else {
    //         newEnq = [SELECT Id, SalesRepId__c, Country__c, AccountId__c FROM CustomerEnquiry__c WHERE Id =: enqId];
    //     }

    //     String enqRTDevName = [SELECT RecordType.DeveloperName FROM CustomerEnquiry__c WHERE id =: newEnq.id].RecordType.DeveloperName;

    //     //Create Opportunity
    //     Opportunity opp = new Opportunity();
    //     opp.AccountId = currentUser.Contact.AccountId;
    //     opp.Name = 'Enquiry - ' + [SELECT Name FROM CustomerEnquiry__c WHERE Id = :newEnq.Id].Name;
        
    //     opp.Country__c = newEnq.Country__c; 
    //     if (enqRTDevName == 'Tubes') {
    //         opp.RecordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByDeveloperName().get('Tubes_RFP').getRecordTypeId();
    //     } else {
    //         opp.RecordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByDeveloperName().get('Wheels_RFP').getRecordTypeId();
    //     }
    //     opp.CloseDate = date.today().addDays(60);
    //     opp.OwnerId = newEnq.SalesRepId__c;
    //     opp.StageName = 'Qualification';
    //     opp.CurrencyIsoCode = currentUser.DefaultCurrencyIsoCode;
    //     opp.Pricebook2Id = pb.Id;
    //     insert opp;

    //     //Update lookup
    //     newEnq.OpportunityId__c = opp.id;
    //     update newEnq;

    //     if(isRemainProduct){
    //         //Create Enquiry Products
    //         List<CustomerEnquiryProduct__c> enqProdList = new List<CustomerEnquiryProduct__c>();
    //         for(WrapperTableInfo prod : prodList){
    //             CustomerEnquiryProduct__c enqProd = new CustomerEnquiryProduct__c();
    //             enqProd.CustomerEnquiryId__c = newEnq.id;
    //             enqProd.Quantity_t__c = prod.choosenQty;
    //             enqProd.Quantity__c = 0;
    //             enqProd.Name = prod.prodName;
    //             enqProd.MeasurementUnit__c = '34';
    //             enqProd.Product2Id__c = prod.productId;
    //             enqProdList.add(enqProd);
    //             productsIds.add(enqProd.Product2Id__c);
    //         }
    //         insert enqProdList;


    //         //Create Opportunity Products
    //         List<OpportunityLineItem> oppProdList = new List<OpportunityLineItem>();
    //         for(WrapperTableInfo prod : prodList){
    //             OpportunityLineItem oppProd = new OpportunityLineItem();
    //             oppProd.OpportunityId = opp.id;
    //             oppProd.Quantity = prod.choosenQty;
    //             oppProd.InquiryUnit__c = '34';
    //             oppProd.Product2Id = prod.productId;
    //             oppProd.TotalPrice = 25;
    //             oppProd.PriceBookEntryId = productToPbEntryMap.get(prod.productId);
    //             oppProdList.add(oppProd);
    //             System.debug('!@!@!@!@!@!@!@!@!@@!!@@!   ' + prod);
    //         }
    //         insert oppProdList;
    //     }
    //  return  newEnq.id;
    // }
    
    // @AuraEnabled
    // public static String getRelatedOpp(String createdEnquiryId){
    //     return [SELECT OpportunityId__c FROM CustomerEnquiry__c WHERE  id=:createdEnquiryId].OpportunityId__c;
    // }
    
    @AuraEnabled
    public static void attachFilesToOpportunity(String filesId,String parentId){
        List<String> filesIdList = new List<String>();
        Object[] values = (Object[])System.JSON.deserializeUntyped(filesId);
        if(values.size()>0){         
             for (Object id : values) {
                 filesIdList.add(string.valueof(id ));
             }
        }    
        List<ContentDocumentLink> linksFile = new List<ContentDocumentLink>();
            For(String c : filesIdList){
                ContentDocumentLink cdl = new ContentDocumentLink(); // Content Document Link to share the file with Opportunity(Parent) record
                    cdl.LinkedEntityId = parentId; // Opportunity ID
                    cdl.ContentDocumentId = String.valueOf(c); //Content Dcoument ID
                    cdl.ShareType = 'V';
                    cdl.Visibility = 'AllUsers';
                    linksFile.add(cdl);
               // System.debug();
        }
       insert linksFile;
    }
    
    // public class EnquiryData {
    //     @AuraEnabled
    //     public String managerId;
    //     @AuraEnabled
    //     public String countryId;
    //     @AuraEnabled
    //     public  string isRemainProduct;
    // }

    // public class WrapperTableInfo {             
    //     @AuraEnabled
    //     public String iTENumber;
    //     @AuraEnabled
    //     public String prodName;
    //     @AuraEnabled
    //     public String productStandard;
    //     @AuraEnabled
    //     public String steelGrade;
    //     @AuraEnabled
    //     public String oD;
    //     @AuraEnabled
    //     public String wT;
    //     @AuraEnabled
    //     public String lMin;
    //     @AuraEnabled
    //     public String lMax;
    //     @AuraEnabled
    //     public String quantity;
    //     @AuraEnabled
    //     public Integer choosenQty;
    //     @AuraEnabled
    //     public String Id;
    //     @AuraEnabled
    //     public Id productId;
        
    //     //lookups
    //     @AuraEnabled
    //     public Id tubeWTid;        
    //     @AuraEnabled
    //     public Id tubeODid;
    //     @AuraEnabled
    //     public Id tubeLengthId;
    //     @AuraEnabled
    //     public Id tubeSteelGradeId;
    //     @AuraEnabled
    //     public Id tubeStandartId;
        
        
        
    //     }
    
    public class PrepolutateWrapper {
        @AuraEnabled
        public Id mailingCountryId;
        
        @AuraEnabled
        public Id managerId;
        
        @AuraEnabled
        public Id contactAccId;
    }
    
    public class RecordTypesWrapper {
        @AuraEnabled
        public String value;
        
        @AuraEnabled
        public String label;
        
        @AuraEnabled
        public String developerName; 
    }

    public class BusinessDivisionWrapper {
        @AuraEnabled
        public String businessDivision;
        
        @AuraEnabled
        public Boolean allDivisions;
    }

    public static void FakeCoverageMethod() {
        Integer i=0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
		i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}