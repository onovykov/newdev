public class ScrapDecadesLimitTriggerHandler extends TriggerHandler implements ITrigger {
    public ScrapDecadesLimitTriggerHandler(Map<Id, SObject> oldMap, Map<Id, SObject> newMap, List<SObject> oldList, List<SObject> newList) {
        super(oldMap, newMap, oldList, newList);
    }

    public void bulkBefore() {
        System.debug('bulkBefore');
    }

    public void bulkAfter() {
        System.debug('bulkAfter');
    }

    public void beforeUpdate(SObject oldSo, SObject so) {
        System.debug('beforeUpdate');
    }

    public void beforeUpdate(List<ScrapDecadesLimit__c> oldRecords, List<ScrapDecadesLimit__c> newRecords) {
        System.debug('beforeUpdate');
        setFieldsValues(newRecords);
        // Побудова ключів для нових записів
        Map<String, Id> keyToIdMap = new Map<String, Id>();
        for (ScrapDecadesLimit__c record : newRecords) {
            keyToIdMap.put(ScrapUtils.buildLimitKey(record), record.Id);
        }

        // Отримуємо всі записи, що мають такі комбінації, але інший Id
        List<ScrapDecadesLimit__c> existing = [
            SELECT Id, DayLookup__c, ScrapType__c
            FROM ScrapDecadesLimit__c
            WHERE DayLookup__c != null AND ScrapType__c != null
        ];

        Set<String> conflictingKeys = new Set<String>();
        for (ScrapDecadesLimit__c existingRec : existing) {
            String key = ScrapUtils.buildLimitKey(existingRec);
            // Якщо такий ключ вже є у нових записах, але з іншим Id
            if (keyToIdMap.containsKey(key) && keyToIdMap.get(key) != existingRec.Id) {
                conflictingKeys.add(key);
            }
        }

        // Додаємо помилки
        for (ScrapDecadesLimit__c record : newRecords) {
            String key = ScrapUtils.buildLimitKey(record);
            if (conflictingKeys.contains(key)) {
                record.addError('❌ ПОМИЛКА! Існує інший запис з таким же типом брухту на зазначену дату.');
            }
        }
    }

    public void beforeInsert(SObject so) {
    }

    public void beforeInsert(List<ScrapDecadesLimit__c> newRecords) {
        System.debug('beforeInsert');
        setFieldsValues(newRecords);
        Set<String> duplicateKeys = getDuplicateKeys(newRecords);

        for (ScrapDecadesLimit__c record : newRecords) {
            String key = ScrapUtils.buildLimitKey(record);

            if (duplicateKeys.contains(key)) {
                record.addError('❌ ПОМИЛКА! Для цього типу брухту на зазначену дату ліміт уже існує.');
            }
        }
    }

    public void beforeDelete(SObject so) {
        System.debug('beforeDelete');
    }

    public void afterInsert(SObject so) {
        System.debug('afterInsert');
    }

    public void afterInsert(List<ScrapDecadesLimit__c> newRecords) {
        System.debug('afterInsert');
    }
    //---
    public void afterUpdate(SObject oldSo, SObject so) {
    }

    public void afterUpdate(List<ScrapDecadesLimit__c> newList, Map<Id, ScrapDecadesLimit__c> oldMap) {
        System.debug('afterUpdate');
    }

    public void afterDelete(SObject so) {
    }

    public override void beforePostProcessing() {
    }

    public void postProcessing() {
    }

    //--- Повертаємо мапу дублів
     public Set<String> getDuplicateKeys(List<ScrapDecadesLimit__c> newList) {
        Set<String> combinationKeys = new Set<String>();
        Set<String> duplicateKeys = new Set<String>();

        // 1. Перевірка дублів у самій колекції newList
        for (ScrapDecadesLimit__c record : newList) {
            String key = ScrapUtils.buildLimitKey(record);
            if (combinationKeys.contains(key)) {
                // Якщо ключ уже був у set — це дубль у цій же транзакції
                duplicateKeys.add(key);
            } else {
                combinationKeys.add(key);
            }
        }

        // 2. Перевірка дублів у базі
        List<ScrapDecadesLimit__c> existing = [
            //SELECT Id, YearPick__c, Month__c, Decade__c, ScrapType__c
            SELECT Id, DayLookup__c, ScrapType__c
            FROM ScrapDecadesLimit__c
            WHERE DayLookup__c != null AND ScrapType__c != null
        ];

        for (ScrapDecadesLimit__c record : existing) {
            String key = ScrapUtils.buildLimitKey(record);
            if (combinationKeys.contains(key)) {
                duplicateKeys.add(key);
            }
        }

        return duplicateKeys;
    }


    //--- Перевіряємо на дублі
    /*
    public Boolean isRecExists(List<ScrapDecadesLimit__c> newList) {
        // Збираємо комбінації полів YearPick__c, Month__c, Decade__c та ScrapType__c для нових записів
        List<ScrapDecadesLimit__c> existsRecords = new List<ScrapDecadesLimit__c>();
        for (ScrapDecadesLimit__c record : newList) {
            String combinationKey = record.DayLookup__c + '-' + record.ScrapType__c;
            // Перевіряємо, чи є така комбінація в базі даних
            ScrapDecadesLimit__c decLimitRec = ScrapUtils.getDecadeLimitByKey(combinationKey);
            if(decLimitRec!=null) {
                existsRecords.add(decLimitRec);
            }
        }
        return existsRecords.isEmpty();
    }
    */
    //--- Встановлюємо значення полів для before insert / before update
    public void setFieldsValues (List<ScrapDecadesLimit__c> newRecords) {
        for(ScrapDecadesLimit__c rec : newRecords) {
            Decade__c decadeRec;
            String sDate = DTUtils.formatDate(rec.LimitDate__c, 'yyyy-MM-dd');
            try {
                String strSQL = 'SELECT Id, Decade__c, Month__c, Year__c, Parent__c, Parent__r.Parent__c ' +
                                'FROM Decade__c ' +
                                'WHERE Date__c = ' + sDate + ' LIMIT 1';
                decadeRec = Database.query(strSQL);
            } catch (QueryException e) {
                decadeRec = null;
            }
            if(decadeRec!=null) {
                rec.YearPick__c = String.valueOf(decadeRec.Year__c);
                rec.Year__c = decadeRec.Year__c;
                rec.Month__c = decadeRec.Month__c;
                rec.Decade__c = decadeRec.Decade__c;
                rec.DayLookup__c = decadeRec.Id;
                rec.DecadeGroup__c = decadeRec.Parent__c;
                rec.MonthGroup__c = decadeRec.Parent__r.Parent__c;
                rec.Key__c = decadeRec.Id +'-'+ rec.ScrapType__c;
            }
        }
    }

    public static void FakeCoverageMethod() {
        Integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

    }
}