public class SysUtils {
    public static final Integer UA = 0;
    public static final Integer EN = 1;
    public static final Map<Integer, String> MONTH_UKR = new Map<Integer, String>{
        1=>'–°—ñ—á–µ–Ω—å',2=>'–õ—é—Ç–∏–π',3=>'–ë–µ—Ä–µ–∑–µ–Ω—å',4=>'–ö–≤—ñ—Ç–µ–Ω—å',5=>'–¢—Ä–∞–≤–µ–Ω—å',6=>'–ß–µ—Ä–≤–µ–Ω—å',
        7=>'–õ–∏–ø–µ–Ω—å',8=>'–°–µ—Ä–ø–µ–Ω—å',9=>'–í–µ—Ä–µ—Å–µ–Ω—å',10=>'–ñ–æ–≤—Ç–µ–Ω—å',11=>'–õ–∏—Å—Ç–æ–ø–∞–¥',12=>'–ì—Ä—É–¥–µ–Ω—å'
    };
    public static final Map<Integer, String> MONTH_ENG = new Map<Integer, String>{
        1=>'January',2=>'February',3=>'March',4=>'April',5=>'May',6=>'June',
        7=>'July',8=>'August',9=>'September',10=>'October',11=>'November',12=>'December'
    };

    /** –î–ª—è —Å–µ—Ä–≤—ñ—Å—É CurrencyRatesService:
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ Advanced Currency Management (ACM).
     * –ü–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –æ–±'—î–∫—Ç DatedConversionRate –¥–æ—Å—Ç—É–ø–Ω–∏–π —É SOQL.
     */
    public static Boolean isACMEnabled() {
        try {
            List<DatedConversionRate> test = [SELECT Id FROM DatedConversionRate LIMIT 1];
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ label –∑ Picklist-–ø–æ–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
     * @param user ‚Äî –æ–±'—î–∫—Ç User, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —ñ–∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
     * @param fieldApiName ‚Äî API –Ω–∞–∑–≤–∞ –ø–æ–ª—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 'BusinesDivision__c'
     * @return label –∑–Ω–∞—á–µ–Ω–Ω—è picklist (–ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–µ), –∞–±–æ '' —è–∫—â–æ –ø–æ–ª–µ –ø—É—Å—Ç–µ
     */
    public static String getPicklistLabel(SObject record, String fieldApiName) {
        Object rawValue = record.get(fieldApiName);
        if (rawValue == null) return '';

        Schema.DescribeFieldResult fieldDesc =
            record.getSObjectType().getDescribe().fields.getMap().get(fieldApiName).getDescribe();

        for (Schema.PicklistEntry entry : fieldDesc.getPicklistValues()) {
            if (entry.getValue() == String.valueOf(rawValue)) {
                return entry.getLabel();
            }
        }

        return String.valueOf(rawValue);
    }

    //--- –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–≤—É —Å–µ–≥–º–µ–Ω—Ç—É –ø–æ –π–æ–≥–æ API
    public static String getSegmentName(String segmentCode) {
        if (String.isBlank(segmentCode)) return '';
        try {
            Map<String, String> valueLabelMap =
                SysUtils.getPicklistFieldMap('Account', 'MarketSegment__c', true);
            String res = valueLabelMap.get(segmentCode);
            return res == null ? '' : res; // <-- –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ '' –∑–∞–º—ñ—Å—Ç—å null
        } catch (Exception e) {
            return '';
        }
    }

    //--- –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—è—Ü–∞ –ø–æ –π–æ–≥–æ –Ω–æ–º–µ—Ä—É
    //    –ü—ñ–¥—Ç—Ä–∏–º—É—î –¥–≤—ñ –≤–µ—Ä—Å—ñ—ó - —É–∫—Ä. —ñ –∞–Ω–≥–ª.
    public static String getMonthName(Integer monthNum, Integer lngVersion) {
        String result = '';
        if(monthNum==null || monthNum==0 || monthNum<0 || monthNum>12) return result;
        if(lngVersion==UA) {
            result = MONTH_UKR.get(monthNum);
        } else {
            result = MONTH_ENG.get(monthNum);
        }
        return result.toUpperCase();
    }

    //--- –ü–æ–≤–µ—Ä—Ç–∞—î –º–∞–ø—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–∂–æ–±—ñ–≤
    public static Map<String, Id> getJobsInWork() {
        List<AsyncApexJob> jobsList = [
                SELECT Id, Status, ApexClassId, ApexClass.Name, MethodName
                FROM AsyncApexJob
                WHERE Status = 'Processing'
        ];

        Map<String, Id> jobsMap = new Map<String, Id>();
        if(!jobsList.isEmpty()) {
            for (AsyncApexJob job : jobsList) {
                jobsMap.put(job.ApexClass.Name, job.Id);
            }
        }
        return jobsMap;
    }

    //--- –ü–æ–≤–µ—Ä—Ç–∞—î —Å–µ—Ç –Ω–∞–∑–≤ –∫–ª–∞—Å—ñ–≤, —è–∫—ñ –∑–∞—Ä–∞–∑ –ø—Ä–∞—Ü—é—é—Ç—å
    public static Set<String> getActiveJobsNames (Map<String, Id> jobsMap) {
        Set<String> jobsSet = new Set<String>();
        if (jobsMap == null || jobsMap.isEmpty()) return jobsSet;
        jobsSet.addAll(jobsMap.keySet());
        return jobsSet;
    }

    //--- –ó—É–ø–∏–Ω–∏—Ç–∏ –¥–∂–æ–±–∏
    public static void stopActiveJobs (Set<Id> jobsIDs) {
        if (jobsIDs == null || jobsIDs.isEmpty()) {
            System.debug('‚ùå No active async apex jobs to stop');
            return;
        }
        Integer nCounter = 0;
        List<AsyncApexJob> jobsList = [
            SELECT Id, Status, ApexClassId, ApexClass.Name, MethodName
            FROM AsyncApexJob
            WHERE Status = 'Processing' AND Id IN :jobsIDs
        ];
        for (AsyncApexJob job : jobsList) {
            System.abortJob(job.Id);
            nCounter++;
            System.debug('Batch was stopped: Id=' + job.Id+'\n');
        }
        System.debug('\n'+nCounter+' batches were stopped\n');
    }

    /******* Trigger Utils ******************/
    // --- –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–º—ñ–Ω–∏–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è ---
    public static Boolean isFieldChanged(SObject oldRec, SObject newRec, String fieldName) {
        if (oldRec == null || newRec == null || String.isBlank(fieldName)) return false;
        Object oldVal = oldRec.get(fieldName);
        Object newVal = newRec.get(fieldName);
        return (oldVal == null && newVal != null) ||
               (oldVal != null && newVal == null) ||
               (oldVal != null && newVal != null && oldVal != newVal);
    }

    // --- –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–º—ñ–Ω–∏–ª–æ—Å—å –±—É–¥—å-—è–∫–µ –∑ –≤–∫–∞–∑–∞–Ω–∏—Ö –ø–æ–ª—ñ–≤ ---
    public static Boolean isAnyFieldChanged(SObject oldRec, SObject newRec, List<String> fieldNames) {
        if (fieldNames == null || fieldNames.isEmpty()) return false;
        for (String field : fieldNames) {
            if (isFieldChanged(oldRec, newRec, field)) return true;
        }
        return false;
    }

    // --- –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–µ–Ω–∏—Ö –ø–æ–ª—ñ–≤ –∑ –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ –ø–µ—Ä–µ–ª—ñ–∫—É ---
    public static List<String> getChangedFields(SObject oldRec, SObject newRec, List<String> fieldNames) {
        List<String> changed = new List<String>();
        for (String field : fieldNames) {
            if (isFieldChanged(oldRec, newRec, field)) {
                changed.add(field);
            }
        }
        return changed;
    }

    /*** –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ —Ç—Ä–∏–≥–µ—Ä—ñ:
    trigger AccountTrigger on Account (before update) {
        for (Account acc : Trigger.new) {
            Account oldAcc = Trigger.oldMap.get(acc.Id);

            // –û–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç
            if (TriggerUtils.isFieldChanged(oldAcc, acc, 'Name')) {
                System.debug('üîÑ Name changed: ' + oldAcc.Name + ' ‚Üí ' + acc.Name);
            }

            // –ö—ñ–ª—å–∫–∞ –ø–æ–ª—ñ–≤
            List<String> importantFields = new List<String>{'Name', 'BillingCountry', 'Industry'};
            if (TriggerUtils.isAnyFieldChanged(oldAcc, acc, importantFields)) {
                List<String> changed = TriggerUtils.getChangedFields(oldAcc, acc, importantFields);
                System.debug('üîç Changed fields: ' + changed);
            }
        }
    }

    */
    /****************************************/

    // –ú–µ—Ç–æ–¥, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î List<Map<String, Object>> —ñ–∑ –ø–æ–ª—è–º–∏ –æ–±'—î–∫—Ç–∞, —ó—Ö–Ω—ñ–º–∏ —Ç–∏–ø–∞–º–∏ —Ç–∞ —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—é
    public static List<Map<String, Object>> getObjectFieldsInfo(String objectName) {
        List<Map<String, Object>> fieldsInfo = new List<Map<String, Object>>();

        // –û—Ç—Ä–∏–º—É—î–º–æ –º–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±'—î–∫—Ç
        Schema.SObjectType objType = Schema.getGlobalDescribe().get(objectName);
        if (objType == null) {
            System.debug('Object not found: ' + objectName);
            return fieldsInfo;
        }

        Schema.DescribeSObjectResult objDescribe = objType.getDescribe();
        Map<String, Schema.SObjectField> fieldMap = objDescribe.fields.getMap();

        // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Å–ø–∏—Å–æ–∫ –º–∞–ø–∞–º–∏ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ–∂–Ω–µ –ø–æ–ª–µ
        for (String fieldName : fieldMap.keySet()) {
            Schema.DescribeFieldResult fieldDescribe = fieldMap.get(fieldName).getDescribe();
            Map<String, Object> fieldData = new Map<String, Object>{
                'FieldName' => fieldName,
                'Type' => fieldDescribe.getType().name(),
                'Length' => (fieldDescribe.getType() == Schema.DisplayType.String ||
                             fieldDescribe.getType() == Schema.DisplayType.TextArea) ?
                            fieldDescribe.getLength() : null,
                'Precision' => (fieldDescribe.getType() == Schema.DisplayType.Double ||
                                fieldDescribe.getType() == Schema.DisplayType.Currency ||
                                fieldDescribe.getType() == Schema.DisplayType.Percent)
                            ? fieldDescribe.getPrecision() : null,
                'Scale'     => (fieldDescribe.getType() == Schema.DisplayType.Double ||
                                fieldDescribe.getType() == Schema.DisplayType.Currency ||
                                fieldDescribe.getType() == Schema.DisplayType.Percent)
                            ? fieldDescribe.getScale() : null
            };
            fieldsInfo.add(fieldData);
        }

        return fieldsInfo;
    }
    //–ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–æ–≥–æ ParentId –∑–≥—ñ–¥–Ω–æ –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é —ñ—î—Ä–∞—Ä—Ö—ñ—ó –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∫–ª—é—á—ñ–≤
    public static void updateHierarchy(String objectName, String itemIdField, String parentIdField, String lookupField) {
        // 1. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –æ–±'—î–∫—Ç–∞ –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –ø–æ–ª—è–º–∏, –≤ —è–∫–æ–≥–æ –Ω–µ–º–∞—î –ø–∞—Ä–µ–Ω—Ç–∞ (Parent__c=null)
        String query = 'SELECT Id, ' + itemIdField + ', ' + 
                        parentIdField + ' FROM ' + objectName + 
                        ' WHERE Parent__c=null';
        List<SObject> records = Database.query(query);

        // 2. –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É ItemId -> RecordId
        Map<String, Id> itemIdToRecordId = new Map<String, Id>();
        for (SObject rec : records) {
            String itemId = (String) rec.get(itemIdField);
            if (itemId != null) {
                itemIdToRecordId.put(itemId, (Id) rec.get('Id'));
            }
        }

        // 3. –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω—å
        List<SObject> recordsToUpdate = new List<SObject>();
        for (SObject rec : records) {
            String parentId = (String) rec.get(parentIdField);
            if (parentId != null && itemIdToRecordId.containsKey(parentId)) {
                rec.put(lookupField, itemIdToRecordId.get(parentId));
                recordsToUpdate.add(rec);
            }
        }

        // 4. –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å–∏
        if (!recordsToUpdate.isEmpty()) {
            update recordsToUpdate;
        }
    }

    //–ú–µ—Ç–æ–¥, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î List —Ä–µ–∫–æ—Ä–¥—ñ–≤ –∑ –æ–±'—î–∫—Ç—É, –æ–±—Ö–æ–¥—è—á–∏ –ª—ñ–º—ñ—Ç —É 50 000 —Ä–µ–∫–æ—Ä–¥—ñ–≤ —É —Å–µ–ª–µ–∫—Ç—ñ
    public static List<SObject> fetchAllRecords(String objectName, List<String> fields, String whereCondition) {
        List<SObject> allRecords = new List<SObject>();
        String query = 'SELECT ' + String.join(fields, ', ') + ' FROM ' + objectName + ' ' + whereCondition;
        String endpoint = System.Url.getOrgDomainUrl().toExternalForm() +
                          '/services/data/v62.0/query?q=' + EncodingUtil.urlEncode(query, 'UTF-8');

        while (endpoint != null) {
            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpoint);
            req.setMethod('GET');
            req.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());

            Http http = new Http();
            HttpResponse res = http.send(req);

            if (res.getStatusCode() == 200) {
                Map<String, Object> jsonResponse = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
                List<Object> records = (List<Object>) jsonResponse.get('records');

                for (Object obj : records) {
                    allRecords.add((SObject) JSON.deserialize(JSON.serialize(obj), SObject.class));
                }

                endpoint = (String) jsonResponse.get('nextRecordsUrl');
                if (endpoint != null) {
                    endpoint = System.Url.getOrgDomainUrl().toExternalForm() + endpoint;
                }
            } else {
                throw new CalloutException('Error: ' + res.getStatusCode() + ' ' + res.getBody());
            }
        }

        return allRecords;
    }

    //–ú–µ—Ç–æ–¥, —â–æ –≤–∏–¥–∞–ª—è—î –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏ –∑ –æ–±'—î–∫—Ç—É objectName
    // –ü–∞—Ä–∞–º–µ—Ç—Ä N –æ–∑–Ω–∞—á–∞—î, –∑–∞ —Å—Ç—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –º–∏ –∑–∞–ª–∏—à–∞—î–º–æ –∑–∞–ø–∏—Å–∏: —Ü–µ –æ—Å—Ç–∞–Ω–Ω—ñ N —Ä–æ–∫—ñ–≤ –ø–ª—é—Å –ø–æ—Ç–æ—á–Ω–∏–π
    //–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, N=4 –æ–∑–Ω–∞—á–∞—Ç–∏–º–µ, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑–∞ 2025 —Ä—ñ–∫ - –≤—ñ–¥ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–æ 01.01.2025 - –ø–ª—é—Å –≤—Å—ñ –¥–∞–Ω—ñ –∑–∞ 2024, 2023, 2022 —Ç–∞ 2021 —Ä—ñ–∫
    public static void deleteOldRecords(String objectName, Integer nYears) {
        // 1. –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∞—Ç—É, –ø–æ —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ (DateTo)
        String soqlDateTo = 'SELECT CreatedDate FROM ' + objectName +
                            ' WHERE CreatedDate >= LAST_N_YEARS:' + nYears +
                            ' ORDER BY CreatedDate ASC LIMIT 1';

        List<SObject> dateRecords = Database.query(soqlDateTo);
        if (dateRecords.isEmpty()) {
            System.debug('–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.');
            return;
        }

        DateTime dateTo = (DateTime) dateRecords[0].get('CreatedDate');
        System.debug('–î–∞—Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ' + dateTo);

        // 2. –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Id
        List<String> fields = new List<String>{'Id'};

        // 3. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏, —è–∫—ñ —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏
        List<SObject> recordsToDelete = fetchAllRecords(objectName,
            fields,
            ' WHERE CreatedDate < ' + dateTo.formatGmt('yyyy-MM-dd\'T\'HH:mm:ss\'Z\'') + ' ORDER BY CreatedDate ASC'
        );

        if (!recordsToDelete.isEmpty()) {
            // 4. –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å–∏
            Database.delete(recordsToDelete, false);
            System.debug('–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: ' + recordsToDelete.size());
        } else {
            System.debug('–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.');
        }
    }


    // –ú–µ—Ç–æ–¥, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞–ø—É Value=Label –∞–±–æ Label=Value –¥–ª—è –ø–æ–ª—è —Ç–∏–ø—É Picklist
    //----- –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–ø—É Value -> Label
    // Map<String, String> valueLabelMap = SysUtils.getPicklistFieldMap('Account', 'Industry', true);
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–ø—É Label -> Value
    //Map<String, String> labelValueMap = SysUtils.getPicklistFieldMap('Account', 'Industry', false);

    public static Map<String, String> getPicklistFieldMap(String objectName, String fieldName, Boolean valueAsKey) {
        Map<String, String> resultMap = new Map<String, String>();

        // –û—Ç—Ä–∏–º—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –æ–±'—î–∫—Ç–∞
        Schema.SObjectType objType = Schema.getGlobalDescribe().get(objectName);
        if (objType == null) {
            throw new IllegalArgumentException('Object ' + objectName + ' does not exist.');
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Å –ø–æ–ª—ñ–≤ –æ–±'—î–∫—Ç–∞
        Map<String, Schema.SObjectField> fields = objType.getDescribe().fields.getMap();
        if (!fields.containsKey(fieldName)) {
            throw new IllegalArgumentException('Field ' + fieldName + ' does not exist in object ' + objectName);
        }

        // –û–ø–∏—Å—É—î–º–æ –ø–æ–ª–µ
        Schema.DescribeFieldResult fieldResult = fields.get(fieldName).getDescribe();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–ª–µ —î Picklist
        if (!fieldResult.getType().equals(Schema.DisplayType.Picklist)) {
            throw new IllegalArgumentException('Field ' + fieldName + ' is not a Picklist.');
        }

        // –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ –º–∞–ø–∏
        for (Schema.PicklistEntry entry : fieldResult.getPicklistValues()) {
            if (valueAsKey) {
                resultMap.put(entry.getValue(), entry.getLabel()); // Value -> Label
            } else {
                resultMap.put(entry.getLabel(), entry.getValue()); // Label -> Value
            }
        }

        return resultMap;
    }

    private static String executeToolingQuery(String soql) {
        try {
            String endpoint = System.Url.getOrgDomainUrl().toExternalForm() + '/services/data/v62.0/tooling/query/?q=' + EncodingUtil.urlEncode(soql, 'UTF-8');

            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpoint);
            req.setMethod('GET');
            req.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());

            Http http = new Http();
            HttpResponse res = http.send(req);

            if (res.getStatusCode() == 200) {
                return res.getBody();
            } else {
                System.debug('Error fetching data: ' + res.getBody());
                throw new CalloutException('Error fetching data: ' + res.getStatusCode() + ' ' + res.getBody());
            }
        } catch (Exception e) {
            System.debug('Callout Exception: ' + e.getMessage());
            return null;
        }
    }

    // –ú–µ—Ç–æ–¥, —â–æ —Ñ–æ—Ä–º—É—î —Ä—è–¥–æ–∫ SELECT –¥–ª—è –æ–±'—î–∫—Ç–∞ –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –∑–∞–¥–∞–Ω–∏—Ö –ø–æ–ª—ñ–≤ —Ç–∞ —É–º–æ–≤–æ—é
    private static String normalizeSpaces(String s) {
        String NBSP = ' ';
        return String.isBlank(s) ? '' : s.replace(NBSP, ' ').replaceAll('\\s+', ' ').trim();
    }

    public static String getSelectFieldsSOQL(String objectName, List<String> Fields, String whereString) {
        if (Fields == null || Fields.isEmpty()) return '';

        String fieldsChunk = String.join(Fields, ',');
        // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å WHERE, –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
        String ws = String.valueOf(whereString);
        if (!String.isBlank(ws)) {
            ws = ws.trim();
            if (ws.toUpperCase().startsWith('WHERE')) ws = ws.substring(5);
            ws = normalizeSpaces(ws);
        }
        String outSql = 'SELECT ' + fieldsChunk + ' FROM ' + objectName + (String.isBlank(ws) ? '' : ' WHERE ' + ws);
        return normalizeSpaces(outSql);
    }




    public static String trimToNearestSlash(String input, Integer maxLength) {
        // –°—é–¥–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ SteelGrade - —è–∫ –ø–∞—Ä–º–µ—Ç—Ä String input
        if (String.isBlank(input) || maxLength <= 0) return '';

        // 1. –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –±—ñ–ª—è —Å–∏–º–≤–æ–ª—ñ–≤ /
        String cleaned = input.replaceAll('\\s*/\\s*', '/');

        // 2. –Ø–∫—â–æ –¥–æ–≤–∂–∏–Ω–∞ –º–µ–Ω—à–∞ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î maxLength ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î
        if (cleaned.length() <= maxLength) {
            return cleaned;
        }

        // 3. –ë–µ—Ä–µ–º–æ substring –¥–æ maxLength —Å–∏–º–≤–æ–ª—ñ–≤
        String sub = cleaned.substring(0, maxLength);

        // 4. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—é –ø–æ–∑–∏—Ü—ñ—é —Å–∏–º–≤–æ–ª—É /
        Integer lastSlashIndex = sub.lastIndexOf('/');
        if (lastSlashIndex == -1) {
            return '';
        }

        return sub.substring(0, lastSlashIndex + 1); // –≤–∫–ª—é—á–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–ª–µ—à
    }

    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—É –º–∞–ø—É KeyPrefix ‚Üí Object API Name
     * –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è ‚Äî –∑–∞ KeyPrefix (001, 003, 005, 006, ... a0B ...)
     */
    public static Map<String, String> getSortedKeyPrefixes() {
        Map<String, String> prefixToObject = new Map<String, String>();

        for (Schema.SObjectType sObjType : Schema.getGlobalDescribe().values()) {
            Schema.DescribeSObjectResult describe = sObjType.getDescribe();
            try {
                String keyPrefix = describe.getKeyPrefix();
                if (keyPrefix != null) {
                    prefixToObject.put(keyPrefix, describe.getName());
                }
            } catch (Exception e) {
                // –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±'—î–∫—Ç–∏ –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É
            }
        }

        // –°–æ—Ä—Ç—É—î–º–æ –∫–ª—é—á—ñ
        List<String> sortedKeys = new List<String>(prefixToObject.keySet());
        sortedKeys.sort();

        // LinkedHashMap –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É
        Map<String, String> sortedMap = new Map<String, String>();
        for (String k : sortedKeys) {
            sortedMap.put(k, prefixToObject.get(k));
        }

        return sortedMap;
    }

//-----------
    public static String shortenSteelGrade(String input, Integer partsCount) {
        if (String.isBlank(input)) return '';
        if (partsCount == null || partsCount < 1) return input;

        input = input.replaceAll('\\s*\\([^)]*\\)', '')
                   .replaceAll('\\s*\\[[^\\]]*\\]', '')
                   .replaceAll('\\s*\\{[^}]*\\}', '')
                   .replace('Not Specified','')
                   .normalizeSpace();

        Boolean isSlash = input.contains('/');

        // 1. –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏ –±—ñ–ª—è / —Ç–∞ –æ–±—Ä—ñ–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏
        String cleaned = '';
        if(isSlash) {
            cleaned = input.replaceAll('\\s*/\\s*', '/').trim();
        }
        else {
            cleaned = input.replaceAll('\\s*;\\s*', ';').trim();
        }

        // 2. –†–æ–∑–±–∏—Ç–∏ –ø–æ /
        List<String> parts = new List<String>();
        if(isSlash) {
            parts = cleaned.split('/');
        } else {
            parts = cleaned.split(';');
        }


        // 3. –Ø–∫—â–æ –±—ñ–ª—å—à–µ partsCount —á–∞—Å—Ç–∏–Ω ‚Äî –∑—ñ–±—Ä–∞—Ç–∏ –ø–µ—Ä—à—ñ partsCount –≤—Ä—É—á–Ω—É
        String result = '';
        if (parts.size() > partsCount) {
            for(Integer i=0; i<partsCount; i++) {
                result = result + parts[i] + ((i<partsCount-1) ? '/' : '');
            }
            return result;
        }

        // 4. –Ü–Ω–∞–∫—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—á–∏—â–µ–Ω–∏–π —Ä—è–¥–æ–∫
        return cleaned;
    }

    //--- –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤–Ω—É –≤–µ—Ä—Å—ñ—é —Ä–µ–∫–æ—Ä–¥—ñ–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–≤–∏ —é–∑–µ—Ä–∞
    public static final Map<String, String> mapLangConv = new Map<String, String>{
        'ar'=>'en','bg'=>'en','cs'=>'en','da'=>'en','de'=>'en','el'=>'en','en'=>'en',
        'es'=>'en','fi'=>'en','fr'=>'en','hr'=>'en','hu'=>'en','in'=>'en','it'=>'en',
        'iw'=>'en','ja'=>'en','ko'=>'en','nl'=>'en','no'=>'en','pl'=>'en','pt'=>'en',
        'ro'=>'en','ru'=>'ru','sk'=>'en','sl'=>'en','sv'=>'en','th'=>'en','tr'=>'en',
        'uk'=>'uk','vi'=>'en','zh'=>'en'
    };

    public static String getObjLngVer(String UserId) {
        String result='';
        if(String.isBlank(UserId)) return result;
        String lngKey = (String) [SELECT Id, Name, LanguageLocaleKey FROM User WHERE Id = :UserId LIMIT 1].LanguageLocaleKey.left(2);
        if(mapLangConv.containsKey(lngKey)) {
            result = mapLangConv.get(lngKey);
        }
        return result;
    }

    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î –º–∞–ø—É, –¥–µ key = –ø—Ä–µ—Ñ—ñ–∫—Å Id (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "001"),
     * –∞ value = API Name –æ–±‚Äô—î–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "Account").
     */
    public static Map<String, String> getIdPrefixMap() {
        Map<String, String> result = new Map<String, String>();
        for (Schema.SObjectType t : Schema.getGlobalDescribe().values()) {
            Schema.DescribeSObjectResult d = t.getDescribe();
            try {
                String kp = d.getKeyPrefix();
                if (kp != null) result.put(kp, d.getName());
            } catch (Exception e) {
                // –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±'—î–∫—Ç–∏ –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É
            }
        }
        return result;
    }

    //--- –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä–µ–ª—ñ–∫ –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ –æ–±'—î–∫—Ç—É
    public class FieldInfo {
        public String apiName {get;set;}
        public String label   {get;set;}
        public String type    {get;set;}
        public Boolean nillable {get;set;}
        public Boolean creatable {get;set;}
        public Boolean updateable {get;set;}
        public Boolean required {get;set;}
    }

    public static List<FieldInfo> getFields(String objectApiName) {
        List<FieldInfo> result = new List<FieldInfo>();

        // –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Å –æ–±'—î–∫—Ç–∞ –∑–∞ –Ω–∞–∑–≤–æ—é
        Schema.SObjectType sObjType = Schema.getGlobalDescribe().get(objectApiName);
        if (sObjType == null) {
            throw new IllegalArgumentException('Object ' + objectApiName + ' does not exist');
        }

        Map<String, Schema.SObjectField> fieldMap = sObjType.getDescribe().fields.getMap();

        for (Schema.SObjectField f : fieldMap.values()) {
            Schema.DescribeFieldResult dfr = f.getDescribe();

            FieldInfo info = new FieldInfo();
            info.apiName   = dfr.getName();
            info.label     = dfr.getLabel();
            info.type      = String.valueOf(dfr.getType());
            info.nillable  = dfr.isNillable();
            info.creatable = dfr.isCreateable();
            info.updateable = dfr.isUpdateable();
            info.required  = !dfr.isNillable() && !dfr.isDefaultedOnCreate();

            result.add(info);
        }
        return result;
    } 
    
    /**** –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ –Ω–∞ –∑—Ä–∞–∑–æ–∫ SELECT feild1, field2 FROM objectApiName
          –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
          - objectApiName - –ê–†–Ü –Ω–∞–∑–≤–∞ –æ–±'—î–∫—Ç—É
          - allFiledsSign - –∞—Å—Ç–µ—Ä–∏—Å–∫ (*)
          - listFields - –ª–∏—Å—Ç –ê–†–Ü –Ω–∞–∑–≤ –ø–æ–ª—ñ–≤
          - listAddFields - –ª–∏—Å—Ç –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –¥–æ–¥–æ–∞—Ç–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ (–Ω–∞–ø–∏—Ä–∏–∫–ª–∞–¥, –ª—É–∫–∞–ø—ñ–≤ —Ç–æ—â–æ)
          –ê–ª–≥–æ—Ä–∏—Ç–º:
          –Ø–∫—â–æ —Ç—Ä–µ–±–∞ –≤–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –ø–æ–ª—è –æ–±'—î–∫—Ç—É - –≤ allFiledsSign  –ø–∏—à–µ–º–æ '*', –≤ listFields - null
          –Ø–∫—â–æ listFields!=null - –ø–∞—Ä–∞–º–µ—Ç—Ä allFiledsSign  —ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è
    ****/
    public static String getSimpleSqlString(String objectApiName, String allFiledsSign, 
                                            List<String> listFields, List<String> listAddFields) {
        List<String> fieldsList = new List<String>();
        if (listFields != null && !listFields.isEmpty()) {
            fieldsList.addAll(listFields);
        } else if ('*'.equals(allFiledsSign)) {
            for (FieldInfo fi : getFields(objectApiName)) {
                fieldsList.add(fi.apiName);
            }
        } else {
            throw new IllegalArgumentException('Provide listFields or set allFiledsSign="*".');
        }
        if (listAddFields != null && !listAddFields.isEmpty()) {
            fieldsList.addAll(listAddFields);
        }
        return 'SELECT ' + String.join(fieldsList, ',') + ' FROM ' + objectApiName;
    }
   

    /**
     * –í–∏–≤–µ—Å—Ç–∏ —É –∫–ª–∞—Å ChildRelResult –≤—Å—ñ child-–∑–≤‚Äô—è–∑–∫–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –æ–±‚Äô—î–∫—Ç–∞
     * @param objectApiName ‚Äì API Name –æ–±‚Äô—î–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'Account', 'Contact__c')
     * @param showCascadeDelete ‚Äì —â–æ –≤–∏–≤–æ–¥–∏—Ç–∏:
       —Ç—ñ–ª—å–∫–∏ CascadeDelete = 0
       —Ç—ñ–ª—å–∫–∏ –ù–ï CascadeDelete = 1
       –≤—Å—ñ = 2
     */
    public class ChildRelResult {
        public String mainObject;
        public String childObject;
        public String fieldAPIName;
        public Boolean isCascadeDelete;

        public ChildRelResult() {
            this.mainObject='';
            this.childObject='';
            this.fieldAPIName='';
            this.isCascadeDelete=false;
        }
    }
    public static List<ChildRelResult> showChildRelationships(String objectApiName, Integer showCascadeDelete) {
        List<ChildRelResult> result = new List<ChildRelResult>();
        try {
            Schema.SObjectType sObjType = Schema.getGlobalDescribe().get(objectApiName);
            if (sObjType == null) {
                System.debug('‚ùå –û–±‚Äô—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ' + objectApiName);
                return result ;
            }

            Schema.DescribeSObjectResult describeResult = sObjType.getDescribe();

            System.debug('\n=== Child Relationships for ' + objectApiName + ' ===\n');
            for (Schema.ChildRelationship cr : describeResult.getChildRelationships()) {
                ChildRelResult cres = new ChildRelResult();
                Boolean isSave = false;
                cres.mainObject = objectApiName;
                cres.childObject = String.valueOf(cr.getChildSObject());
                cres.fieldAPIName = String.valueOf(cr.getField());
                cres.isCascadeDelete = cr.isCascadeDelete();
                isSave = (
                            (showCascadeDelete==0 && cr.isCascadeDelete()) ||
                            (showCascadeDelete==1 && !cr.isCascadeDelete()) ||
                            showCascadeDelete == 2
                         );
                if(isSave) result.add(cres);
                /*
                System.debug(
                    'Child Object: ' + cr.getChildSObject() +
                    ' : Field: ' + cr.getField() +
                    ' : Cascade Delete: ' + cr.isCascadeDelete()
                );
                */
            }
        } catch (Exception e) {
            System.debug('‚ùå –ü–æ–º–∏–ª–∫–∞: ' + e.getMessage());
        }
        return result;
    }      
}