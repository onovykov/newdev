public with sharing class QuestionnaireResponseEmailer {

    @AuraEnabled
    public static void processResponsesForInviteEmail(String questionnaireId) {
        Questionnaire__c questionnaire = [SELECT id, Status__c FROM Questionnaire__c WHERE id =:questionnaireId];
        List<Questionnaire_Response__c> responses = [SELECT id,RespondentEmail__c, Invite_Email_Date__c,Respondent_Language__c,Respondent__r.Name, Respondent__r.MailingCountry,
                                                            MarketSegment__c,Respondent__r.Is_Steel_Segment__c
                                                     FROM Questionnaire_Response__c 
                                                     WHERE Questionnaire__c =:questionnaireId];

        sendEmailToRespondents(responses, 'invite');
        questionnaire.Status__c ='Sent';
        questionnaire.StartDate__c = Date.today(); 

        for (Questionnaire_Response__c response : responses) {
            response.Invite_Email_Date__c = Date.today();
        }
        update questionnaire;
        update responses;
    }
    @AuraEnabled
    public static void processResponsesForRecallEmail(String questionnaireId) {
        Questionnaire__c questionnaire = [SELECT id, Status__c FROM Questionnaire__c WHERE id =:questionnaireId];
        List<Questionnaire_Response__c> responses = [SELECT id,Respondent__r.Is_Steel_Segment__c,RespondentEmail__c,Status__c,Recall_Email_Date__c,Respondent_Language__c,Respondent__r.Name, Respondent__r.MailingCountry,
                                                            MarketSegment__c
                                                     FROM Questionnaire_Response__c 
                                                     WHERE Questionnaire__c =:questionnaireId
                                                     AND Status__c = 'Not Started'];
        sendEmailToRespondents(responses, 'recall');
        for (Questionnaire_Response__c response : responses) {
            response.Recall_Email_Date__c = Date.today();
        }
        update responses;
    }
    @AuraEnabled
    public static void sendEmailToRespondents(List<Questionnaire_Response__c> questionnaireResponses, String type) {
        Map<String, Id> templateIdMap = getTemplateIdMap();
        List<Messaging.SingleEmailMessage> emailMessages = new List<Messaging.SingleEmailMessage>();
        system.debug(templateIdMap);
    
        system.debug('questionnaireResponses' + questionnaireResponses);
        for (Questionnaire_Response__c response : questionnaireResponses) {
            if (response.RespondentEmail__c != null) {
                Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                String templateKey = getTemplateKey(response, type);
                system.debug(templateKey);

                Id templateId = templateIdMap.get(templateKey);
                system.debug(templateId);
                if (templateId != null) {
                    mail.setTemplateId(templateId);
                }    
                mail.setTargetObjectId(response.Respondent__c);
                mail.setWhatId(response.Id);
                mail.setToAddresses(new String[]{response.RespondentEmail__c});
                mail.setSaveAsActivity(true);
                emailMessages.add(mail);
            }
        }
    
        if (!emailMessages.isEmpty()) {
            try {
                Messaging.SendEmailResult[] results = Messaging.sendEmail(emailMessages);
                System.debug('Email Results: ' + results);
            } catch (Exception e) {
                System.debug('Error sending email: ' + e.getMessage());
                throw new AuraHandledException('Error sending email: ' + e.getMessage());
            }
        }
    }
    
    private static Map<String, Id> getTemplateIdMap() {
        Map<String, Id> templateIdMap = new Map<String, Id>();
        for (EmailTemplate et : [SELECT Id, DeveloperName FROM EmailTemplate WHERE DeveloperName LIKE 'Questionnaire_%']) {
            String baseDeveloperName = et.DeveloperName.replaceAll('_[0-9]+$', ''); // Removes the numeric suffix
            templateIdMap.put(baseDeveloperName, et.Id);
        }
        return templateIdMap;
    }
    
    private static String getTemplateKey(Questionnaire_Response__c response, String type) {
        String language;
        String templateType = type.substring(0, 1).toUpperCase() + type.substring(1).toLowerCase(); // Capitalize first letter
        String segmentSuffix = '';
        System.debug('response.MarketSegment__c '+ response.MarketSegment__c);
        if (response.MarketSegment__c == '00006') {
            segmentSuffix = '_KLW';
            language = (response.Respondent__r.MailingCountry == 'Ukraine') ? 'Ukrainian' : 'English';
        }else if(response.Respondent__r.Is_Steel_Segment__c == true){
            segmentSuffix = '_Steel';
        }
        if (response.Respondent__r.MailingCountry == 'Turkmenistan' || response.Respondent__r.MailingCountry == 'Uzbekistan' && response.MarketSegment__c != '00006') {
            language = 'Russian';
        } else if (response.MarketSegment__c == '00011') {
            language = 'Ukrainian';
        } else {
            if(String.isBlank(language)) language = 'English';
        }
        System.debug('Questionnaire_' + templateType + '_' + language + segmentSuffix);
        return 'Questionnaire_' + templateType + '_' + language + segmentSuffix;
    }
    
    
    
    @AuraEnabled
    public static void sendEmailWithAttachmentToRespondent(String base64FileContent, String fileName, String respondentEmail) {
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
        OrgWideEmailAddress[] owea = [SELECT Id, Address FROM OrgWideEmailAddress WHERE DisplayName = 'Interpipe Marketing' LIMIT 1];
            if (owea.size() > 0) {
                email.setOrgWideEmailAddressId(owea[0].Id);
            }
        email.setToAddresses(new String[] { respondentEmail });
        email.setSubject('Interpipe Survey');
        String emailBody = 'Your form has been received. Thank you for taking part in our yearly Customer Satisfaction Survey!<br>';
        emailBody += 'The copy of your replies is attached to this email.<br>';
        emailBody += 'In case you have any questions, please contact the marketing team in response to this email. <br><br>';
        emailBody += 'Respectfully,<br>Marketing team,<br>Interpipe/Interpipe Steel/KLW<br><br>';
        email.setHtmlBody(emailBody);
        Messaging.EmailFileAttachment attachment = new Messaging.EmailFileAttachment();
        attachment.setFileName(fileName);
        attachment.setBody(EncodingUtil.base64Decode(base64FileContent));
        email.setFileAttachments(new Messaging.EmailFileAttachment[] { attachment });
        Messaging.SendEmailResult[] results = Messaging.sendEmail(new Messaging.SingleEmailMessage[] { email });
        system.debug('Result - ' + results);
    }
    public static void FakeCoverageMethod() {
        Integer i=0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}