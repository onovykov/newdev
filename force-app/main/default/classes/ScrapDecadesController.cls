public with sharing class ScrapDecadesController {

    // DTO (Data Transfer Object) –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –¥–µ—Ä–µ–≤–∞
    public class DecadeNode {
        @AuraEnabled public Id id;
        @AuraEnabled public String name;
        @AuraEnabled public String headerName;
        @AuraEnabled public Integer level;        // —Ä—ñ–≤–µ–Ω—å (0/1/2‚Ä¶)
        @AuraEnabled public Integer year;         // –ø–æ–ª–µ Year__c
        @AuraEnabled public String month;         // –ø–æ–ª–µ Month__c
        @AuraEnabled public String decade;        // –ø–æ–ª–µ Decade__c
        @AuraEnabled public Date dateValue;
        @AuraEnabled public Id parentId;          // Parent__c
        @AuraEnabled public Boolean hasChildren;  // —á–∏ —î –¥–æ—á—ñ—Ä–Ω—ñ –∑–∞–ø–∏—Å–∏
        @AuraEnabled public List<DecadeNode> children = new List<DecadeNode>();
    }

    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –∑–∞–ø–∏—Å Decade__c —É –≤—É–∑–æ–ª DecadeNode
    private static DecadeNode toNode(Decade__c record) {
        DecadeNode node = new DecadeNode();
        node.id         = record.Id;
        node.name       = record.Name;
        node.headerName = record.HeaderName__c;
        node.level      = (record.Level__c == null) ? null : Integer.valueOf(record.Level__c);
        node.year       = (record.Year__c == null) ? null : Integer.valueOf(record.Year__c);
        node.month      = record.Month__c;
        node.decade     = record.Decade__c;
        node.dateValue  = record.Date__c;
        node.parentId   = record.Parent__c;
        node.hasChildren = false;
        return node;
    }

    @AuraEnabled(cacheable=true)
    public static List<DecadeNode> getHierarchy(Integer yearFilter, Integer limitSize) {
        Integer effectiveLimit = (limitSize == null || limitSize <= 0) ? 10000 : Math.min(limitSize, 50000);

        List<Decade__c> records;

        if (yearFilter == null) {
            records = [
                    SELECT Id, Name, HeaderName__c, Level__c, Year__c, Month__c, Decade__c, Date__c, Parent__c
                    FROM Decade__c
                    ORDER BY Level__c ASC, Year__c ASC, Month__c ASC, Decade__c ASC, Date__c ASC
                    LIMIT :effectiveLimit
            ];
        } else {
            records = [
                    SELECT Id, Name, HeaderName__c, Level__c, Year__c, Month__c, Decade__c, Date__c, Parent__c
                    FROM Decade__c
                    WHERE Year__c = :yearFilter
                    ORDER BY Level__c ASC, Year__c ASC, Month__c ASC, Decade__c ASC, Date__c ASC
                    LIMIT :effectiveLimit
            ];
        }

        Map<Id, DecadeNode> nodeById = new Map<Id, DecadeNode>();
        Map<Id, List<DecadeNode>> childrenMap = new Map<Id, List<DecadeNode>>();
        List<DecadeNode> rootNodes = new List<DecadeNode>();

        for (Decade__c record : records) {
            DecadeNode node = toNode(record);
            nodeById.put(node.id, node);

            if (node.parentId == null) {
                rootNodes.add(node); // —Ü–µ ¬´–ö–∞–ª–µ–Ω–¥–∞—Ä¬ª
            } else {
                if (!childrenMap.containsKey(node.parentId)) {
                    childrenMap.put(node.parentId, new List<DecadeNode>());
                }
                childrenMap.get(node.parentId).add(node);
            }
        }

        // –ó‚Äô—î–¥–Ω—É—î–º–æ –¥—ñ—Ç–µ–π –∑ –±–∞—Ç—å–∫–∞–º–∏
        for (DecadeNode node : nodeById.values()) {
            List<DecadeNode> children = childrenMap.get(node.id);
            if (children != null && !children.isEmpty()) {
                node.children.addAll(children);
                node.hasChildren = true;
            }
        }

        return rootNodes;
    }


    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –æ–¥–Ω–æ–≥–æ –≤—É–∑–ª–∞ + –π–æ–≥–æ –¥–æ—á—ñ—Ä–Ω—ñ (–¥–ª—è –ø—Ä–∞–≤–æ—ó –ø–∞–Ω–µ–ª—ñ).
     */
    @AuraEnabled(cacheable=true)
    public static DecadeNode getDetails(Id decadeId) {
        if (decadeId == null) return null;

        Decade__c record = [
                SELECT Id, Name, HeaderName__c, Level__c, Year__c, Month__c, Decade__c, Date__c, Parent__c
                FROM Decade__c
                WHERE Id = :decadeId
                LIMIT 1
        ];
        DecadeNode node = toNode(record);

        List<Decade__c> children = [
                SELECT Id, Name, HeaderName__c, Level__c, Year__c, Month__c, Decade__c, Date__c, Parent__c
                FROM Decade__c
                WHERE Parent__c = :record.Id
                ORDER BY Level__c ASC, Date__c ASC, Name ASC
                LIMIT 5000
        ];
        if (!children.isEmpty()) {
            node.hasChildren = true;
            for (Decade__c childRecord : children) {
                node.children.add(toNode(childRecord));
            }
        }
        return node;
    }

    public class DayLimitDto {
        @AuraEnabled public Id recordId { get; set; }         // ScrapDecadesLimit__c.Id (–º–æ–∂–µ –±—É—Ç–∏ null –¥–ª—è –Ω–æ–≤–∏—Ö)
        @AuraEnabled public Id scrapTypeId { get; set; }
        @AuraEnabled public Decimal dayLimit { get; set; }     // DayLimit__c
    }

    @AuraEnabled(cacheable=true)
    public static List<DayLimitDto> getDayLimits(Id dayDecadeId) {
        if (dayDecadeId == null) return new List<DayLimitDto>();
        List<DayLimitDto> out = new List<DayLimitDto>();
        for (ScrapDecadesLimit__c l : [
                SELECT Id, ScrapType__c, DayLimit__c
                FROM ScrapDecadesLimit__c
                WHERE DayLookup__c = :dayDecadeId
        ]) {
            DayLimitDto d = new DayLimitDto();
            d.recordId = l.Id;
            d.scrapTypeId = l.ScrapType__c;
            d.dayLimit = l.DayLimit__c;
            out.add(d);
        }
        return out;
    }

    @AuraEnabled
public static List<DayLimitByDateDTO> getDayLimitsByDate(Date targetDate) {
    List<DayLimitByDateDTO> result = new List<DayLimitByDateDTO>();
    if (targetDate == null) return result;

        List<ScrapType__c> activeTypes = [
                SELECT Id, Name, ScrapTypeCode__c, IsActive__c
                FROM ScrapType__c
                WHERE IsActive__c = true
                ORDER BY Name
        ];

        // üëâ –∑–±–∏—Ä–∞—î–º–æ –º–∞–ø—É –∑–∞ –∫–ª—é—á–µ–º ScrapType__c
        Map<Id, ScrapDecadesLimit__c> byType = new Map<Id, ScrapDecadesLimit__c>();
        for (ScrapDecadesLimit__c l : [
                SELECT Id, ScrapType__c, DayLimit__c, LimitDate__c
                FROM ScrapDecadesLimit__c
                WHERE LimitDate__c = :targetDate
        ]) {
            if (l.ScrapType__c != null) byType.put(l.ScrapType__c, l);
        }

    // –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è:
    // 1) —Å—É–º–∞ Weight__c
    Map<Id, Decimal> incomingByType = new Map<Id, Decimal>();
    for (AggregateResult ar : [
        SELECT ScrapType__c st, SUM(Weight__c) w
        FROM ScrapSlotReserve__c
        WHERE ReserveDate__c = :targetDate
          AND IsCancelled__c = false
          AND Weight__c != null
        GROUP BY ScrapType__c
    ]) {
        Id st = (Id) ar.get('st');
        if (st != null) incomingByType.put(st, (Decimal) ar.get('w'));
    }
    // 2) –¥–æ–¥–∞—î–º–æ Tonnage__c —Ç–∞–º, –¥–µ Weight__c = null
    for (AggregateResult ar : [
        SELECT ScrapType__c st, SUM(Tonnage__c) t
        FROM ScrapSlotReserve__c
        WHERE ReserveDate__c = :targetDate
          AND IsCancelled__c = false
          AND Weight__c = null
          AND Tonnage__c != null
        GROUP BY ScrapType__c
    ]) {
        Id st = (Id) ar.get('st');
        if (st == null) continue;
        Decimal exists = incomingByType.containsKey(st) ? incomingByType.get(st) : 0;
        incomingByType.put(st, exists + (Decimal) ar.get('t'));
    }

    for (ScrapType__c t : activeTypes) {
        ScrapDecadesLimit__c rec = byType.get(t.Id);
        Decimal lim = (rec == null ? 0 : (rec.DayLimit__c == null ? 0 : rec.DayLimit__c));
        Decimal inc = incomingByType.get(t.Id);
        Decimal rem = lim - (inc == null ? 0 : inc);

        DayLimitByDateDTO dto = new DayLimitByDateDTO();
        dto.scrapTypeId = t.Id;
        dto.name        = t.Name;
        dto.limitValue  = String.valueOf(lim.setScale(1));
        dto.incoming    = String.valueOf(((inc == null ? 0 : inc)).setScale(1));
        dto.remaining   = String.valueOf(rem.setScale(1));
        result.add(dto);
    }
    return result;
}



    public class DayLimitByDateDTO {
        @AuraEnabled public Id scrapTypeId { get; set; }
        @AuraEnabled public String name { get; set; }
        @AuraEnabled public String limitValue { get; set; }
        @AuraEnabled public String incoming { get; set; }   // +++
        @AuraEnabled public String remaining { get; set; }  // +++
    }

    // === DTO –¥–ª—è –∞–ø–¥–µ–π—Ç–∞ –∑ UI (–≤–≤–æ–¥–∏ —É –∫–æ–ª–æ–Ω—Ü—ñ "–õ—ñ–º—ñ—Ç") ===
    public class DayLimitUpsertItem {
        @AuraEnabled public Id scrapTypeId { get; set; }
        @AuraEnabled public String value { get; set; }
    }

// === –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è UI ===
    public class SaveDayLimitsResult {
        @AuraEnabled public Integer inserted { get; set; }
        @AuraEnabled public Integer updated { get; set; }
        @AuraEnabled public Integer totalProcessed { get; set; }
        @AuraEnabled public List<String> messages { get; set; }
    }

// –í–Ω—É—Ç—Ä—ñ—à–Ω—è —É—Ç–∏–ª—ñ—Ç–∞: –ø–∞—Ä—Å–∏–º–æ —á–∏—Å–ª–æ, –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü—ñ–ª–µ –∞–±–æ –∑ –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∫–æ–≤–∏–º –∑–Ω–∞–∫–æ–º
    private static Decimal parseOneDecimal(String src) {
        if (String.isBlank(src)) return null;
        String s = src.trim();
        // —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ –∞–±–æ —Ü–∏—Ñ—Ä–∏ –∑ –æ–¥–Ω—ñ—î—é –¥–µ—Å—è—Ç–∫–æ–≤–æ—é (–∫—Ä–∞–ø–∫–æ—é)
        Pattern p = Pattern.compile('^\\d+(\\.\\d)?$');
        if (!p.matcher(s).matches()) {
            // –∫–∏–¥–∞—î–º–æ –≤–∏–Ω—è—Ç–æ–∫, UI –ø–æ–∫–∞–∂–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            throw new AuraHandledException('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É: "'+ s + '". –î–æ–∑–≤–æ–ª–µ–Ω–æ —Ü—ñ–ª–µ –∞–±–æ –∑ –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∫–æ–≤–∏–º –∑–Ω–∞–∫–æ–º (–Ω–∞–ø—Ä. 10 –∞–±–æ 10.1).');
        }
        Decimal d = Decimal.valueOf(s);
        // –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–æ –æ–¥–Ω—ñ—î—ó –¥–µ—Å—è—Ç–æ—ó (—â–æ–± —É–Ω–∏–∫–∞—Ç–∏ 10.0 vs 10)
        return d.setScale(1);
    }

    /**
     * –ó–±–µ—Ä–µ–≥—Ç–∏ –ª—ñ–º—ñ—Ç–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É.
     * - –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—ñ –∑–∞–ø–∏—Å–∏ ScrapDecadesLimit__c, —è–∫—â–æ —ó—Ö –Ω–µ –±—É–ª–æ
     * - –û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á—ñ, —è–∫—â–æ –≤–∂–µ —î –¥–ª—è —Ü—ñ—î—ó –¥–∞—Ç–∏ + —Ç–∏–ø—É –±—Ä—É—Ö—Ç—É
     * - –ü–æ–ª—è, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ: LimitDate__c (–æ–±–æ–≤ º—è–∑–∫–æ–≤–æ), ScrapType__c, DayLimit__c, DayLookup__c (—è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π)
     */
    @AuraEnabled
    public static SaveDayLimitsResult saveDayLimitsByDate(Date targetDate, Id dayDecadeId, List<DayLimitUpsertItem> items) {
        System.debug('====================saveDayLimitsByDate=======================');
        System.debug('targetDate: ' + targetDate);
        System.debug('dayDecadeId: ' + dayDecadeId);
        System.debug('items: ' + items);
        if (targetDate == null) {
            throw new AuraHandledException('–ù–µ –≤–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞.');
        }
        SaveDayLimitsResult res = new SaveDayLimitsResult();
        res.inserted = 0; res.updated = 0; res.totalProcessed = 0; res.messages = new List<String>();

        if (items == null || items.isEmpty()) {
            res.messages.add('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.');
            return res;
        }

        // –±–µ—Ä–µ–º–æ –≤—Å—ñ —Ç–∏–ø–∏, —â–æ –ø—Ä–∏–π—à–ª–∏ –∑ UI
        Set<Id> typeIds = new Set<Id>();
        for (DayLimitUpsertItem it : items) {
            if (it == null || it.scrapTypeId == null) continue;
            typeIds.add(it.scrapTypeId);
        }
        if (typeIds.isEmpty()) {
            res.messages.add('–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É –±—Ä—É—Ö—Ç—É.');
            return res;
        }

        // —ñ—Å–Ω—É—é—á—ñ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ü—é –¥–∞—Ç—É –ø–æ —Ü–∏–º —Ç–∏–ø–∞–º
        Map<Id, ScrapDecadesLimit__c> existingByType = new Map<Id, ScrapDecadesLimit__c>();
        for (ScrapDecadesLimit__c l : [
                SELECT Id, ScrapType__c, DayLimit__c, LimitDate__c, DayLookup__c
                FROM ScrapDecadesLimit__c
                WHERE LimitDate__c = :targetDate
                AND ScrapType__c IN :typeIds
        ]) {
            if (l.ScrapType__c != null) existingByType.put(l.ScrapType__c, l);
        }

        List<ScrapDecadesLimit__c> toInsert = new List<ScrapDecadesLimit__c>();
        List<ScrapDecadesLimit__c> toUpdate = new List<ScrapDecadesLimit__c>();

        for (DayLimitUpsertItem it : items) {
            if (it == null || it.scrapTypeId == null) continue;
            // –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—É—Å—Ç—ñ/–≤–∏–¥–∞–ª–µ–Ω–Ω—è: –∑–∞—Ä–∞–∑ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ, —Ç—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            Decimal parsed;
            if (String.isBlank(it.value)) {
                parsed = 0;
            } else {
                parsed = parseOneDecimal(it.value);
            }


            if (existingByType.containsKey(it.scrapTypeId)) {
                ScrapDecadesLimit__c upd = existingByType.get(it.scrapTypeId);
                upd.DayLimit__c = parsed;
                if (dayDecadeId != null) upd.DayLookup__c = dayDecadeId; // –ø—ñ–¥–≤ º—è–∂–µ–º–æ —è–∫—â–æ –ø—Ä–∏–π—à–æ–≤
                toUpdate.add(upd);
            } else {
                ScrapDecadesLimit__c ins = new ScrapDecadesLimit__c();
                ins.ScrapType__c = it.scrapTypeId;
                ins.DayLimit__c  = parsed;
                ins.LimitDate__c = targetDate;
                if (dayDecadeId != null) ins.DayLookup__c = dayDecadeId;
                toInsert.add(ins);
            }
        }

        if (!toInsert.isEmpty()) {
            insert toInsert;
            res.inserted = toInsert.size();
        }
        if (!toUpdate.isEmpty()) {
            update toUpdate;
            res.updated = toUpdate.size();
        }
        res.totalProcessed = res.inserted + res.updated;

        if (res.totalProcessed == 0) {
            res.messages.add('–ù–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.');
        } else {
            res.messages.add('–ó–±–µ—Ä–µ–∂–µ–Ω–æ –ª—ñ–º—ñ—Ç–∏: ' + res.totalProcessed);
        }
        return res;
    }

    /**
     * –ó–±–µ—Ä–µ–≥—Ç–∏ –ª—ñ–º—ñ—Ç–∏, —è–∫—â–æ –∑ UI –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ dayDecadeId (—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–Ω—è –≤ –¥–µ—Ä–µ–≤—ñ).
     * –ú–∏ –∑–Ω–∞–π–¥–µ–º–æ –¥–∞—Ç—É —Ü—å–æ–≥–æ –¥–Ω—è —ñ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—É—î–º–æ –Ω–∞ saveDayLimitsByDate.
     */
    @AuraEnabled
    public static SaveDayLimitsResult saveDayLimitsForDay(Id dayDecadeId, List<DayLimitUpsertItem> items) {
        System.debug('items JSON: ' + JSON.serialize(items));

        System.debug('================saveDayLimitsForDay==================');
        System.debug('dayDecadeId: ' + dayDecadeId);
        System.debug('items: ' + items);
        if (dayDecadeId == null) {
            throw new AuraHandledException('–ù–µ –≤–∫–∞–∑–∞–Ω–æ –¥–µ–Ω—å (Decade__c Id).');
        }
        Decade__c dayRec = [
                SELECT Id, Date__c FROM Decade__c WHERE Id = :dayDecadeId LIMIT 1
        ];
        if (dayRec.Date__c == null) {
            throw new AuraHandledException('–£ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è –¥–∞—Ç–∞.');
        }
        return saveDayLimitsByDate(dayRec.Date__c, dayDecadeId, items);
    }

    public class DecadeTotalsDTO {
        @AuraEnabled public Id scrapTypeId { get; set; }
        @AuraEnabled public String name { get; set; }
        @AuraEnabled public String totalValue { get; set; } // String, —â–æ–± –ª–µ–≥–∫–æ –≤—ñ–¥–¥–∞–≤–∞—Ç–∏ '‚Äî'
        @AuraEnabled public String incoming { get; set; }     // —Ñ–∞–∫—Ç–∏—á–Ω—ñ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è
        @AuraEnabled public String remaining { get; set; }    // –∑–∞–ª–∏—à–æ–∫ = total - incoming
    }

//    @AuraEnabled(cacheable=false)
//    public static List<DecadeTotalsDTO> getDecadeTotalsByDecade(Id decadeId) {
//        if (decadeId == null) return new List<DecadeTotalsDTO>();
//
//        // 1) –î–Ω—ñ —Ü—ñ—î—ó –¥–µ–∫–∞–¥–∏
//        List<Decade__c> dayNodes = [
//                SELECT Id
//                FROM Decade__c
//                WHERE Parent__c = :decadeId
//        ];
//        if (dayNodes.isEmpty()) return new List<DecadeTotalsDTO>();
//
//        Set<Id> dayIds = new Set<Id>();
//        for (Decade__c d : dayNodes) dayIds.add(d.Id);
//
//        // 2) –ê–≥—Ä–µ–≥–∞—Ü—ñ—è —Å—É–º –ø–æ ScrapType –¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö –¥–Ω—ñ–≤
//        Map<Id, Decimal> totalsByType = new Map<Id, Decimal>();
//        for (AggregateResult ar : [
//                SELECT ScrapType__c st, SUM(DayLimit__c) s
//                FROM ScrapDecadesLimit__c
//                WHERE DayLookup__c IN :dayIds
//                GROUP BY ScrapType__c
//        ]) {
//            if ((Id)ar.get('st') != null) {
//                Decimal sum = (Decimal) ar.get('s');
//                totalsByType.put((Id)ar.get('st'), (sum == null ? 0 : sum).setScale(1));
//            }
//        }
//
//        // 3) –£—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∏–ø–∏ ‚Äî —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –π —Ç—ñ, –¥–µ —Å—É–º –Ω–µ–º–∞—î
//        Map<Id, ScrapType__c> types = new Map<Id, ScrapType__c>([
//                SELECT Id, Name, IsActive__c
//                FROM ScrapType__c
//                WHERE IsActive__c = true
//                ORDER BY Name
//        ]);
//
//        List<DecadeTotalsDTO> out = new List<DecadeTotalsDTO>();
//        for (ScrapType__c t : types.values()) {
//            Decimal v = totalsByType.get(t.Id);
//            // 0 -> null, —â–æ–± —Ñ—Ä–æ–Ω—Ç –Ω–∞–º–∞–ª—é–≤–∞–≤ '‚Äî' —ñ –Ω–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞–≤ —è–∫ "–ó–∞–ø–æ–≤–Ω–µ–Ω–æ"
//            String asText = (v == null || v == 0) ? null : String.valueOf(v);
//            DecadeTotalsDTO dto = new DecadeTotalsDTO();
//            dto.scrapTypeId = t.Id;
//            dto.name = t.Name;
//            dto.totalValue = asText;
//            out.add(dto);
//        }
//        return out;
//    }

    @AuraEnabled(cacheable=false)
    public static List<DecadeTotalsDTO> getDecadeTotalsByDecade(Id decadeId) {
        if (decadeId == null) return new List<DecadeTotalsDTO>();

        // 1) –î–Ω—ñ —Ü—ñ—î—ó –¥–µ–∫–∞–¥–∏
        List<Decade__c> dayNodes = [
                SELECT Id, Date__c
                FROM Decade__c
                WHERE Parent__c = :decadeId
        ];
        if (dayNodes.isEmpty()) return new List<DecadeTotalsDTO>();

        Set<Id> dayIds = new Set<Id>();
        Set<Date> dayDates = new Set<Date>();
        for (Decade__c d : dayNodes) {
            dayIds.add(d.Id);
            if (d.Date__c != null) dayDates.add(d.Date__c);
        }

        // 2) –°—É–º–∏ –ª—ñ–º—ñ—Ç—ñ–≤
        Map<Id, Decimal> totalsByType = new Map<Id, Decimal>();
        for (AggregateResult ar : [
                SELECT ScrapType__c st, SUM(DayLimit__c) s
                FROM ScrapDecadesLimit__c
                WHERE DayLookup__c IN :dayIds
                GROUP BY ScrapType__c
        ]) {
            if ((Id)ar.get('st') != null) {
                totalsByType.put((Id)ar.get('st'), (Decimal)ar.get('s'));
            }
        }

        // 3) –°—É–º–∏ —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω—å –∑—ñ —Å–ª–æ—Ç—ñ–≤
        Map<Id, Decimal> incomingByType = new Map<Id, Decimal>();

// —Å—É–º–∞ —Ñ–∞–∫—Ç—É (–≤–∞–≥–∞)
        for (AggregateResult ar : [
                SELECT ScrapType__c st, SUM(Weight__c) w
                FROM ScrapSlotReserve__c
                WHERE ReserveDate__c IN :dayDates
                AND IsCancelled__c = false
                AND Weight__c != null
                GROUP BY ScrapType__c
        ]) {
            Id st = (Id)ar.get('st');
            if (st != null) incomingByType.put(st, (Decimal)ar.get('w'));
        }

// –¥–æ–¥–∞—î–º–æ –∑–∞—è–≤–ª–µ–Ω–∏–π —Ç–æ–Ω–Ω–∞–∂ —Ç–∞–º, –¥–µ —Ñ–∞–∫—Ç—É —â–µ –Ω–µ–º–∞—î
        for (AggregateResult ar : [
                SELECT ScrapType__c st, SUM(Tonnage__c) t
                FROM ScrapSlotReserve__c
                WHERE ReserveDate__c IN :dayDates
                AND IsCancelled__c = false
                AND Weight__c = null
                AND Tonnage__c != null
                GROUP BY ScrapType__c
        ]) {
            Id st = (Id)ar.get('st');
            if (st == null) continue;
            Decimal exists = incomingByType.containsKey(st) ? incomingByType.get(st) : 0;
            incomingByType.put(st, exists + (Decimal)ar.get('t'));
        }

        // 4) –£—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∏–ø–∏
        List<ScrapType__c> types = [
                SELECT Id, Name FROM ScrapType__c WHERE IsActive__c = true ORDER BY Name
        ];

        // 5) –§–æ—Ä–º—É—î–º–æ DTO
        List<DecadeTotalsDTO> out = new List<DecadeTotalsDTO>();
        for (ScrapType__c t : types) {
            Decimal limitValue = totalsByType.get(t.Id);
            Decimal fact  = incomingByType.get(t.Id);
            Decimal rem   = (limitValue == null ? 0 : limitValue) - (fact == null ? 0 : fact);

            DecadeTotalsDTO dto = new DecadeTotalsDTO();
            dto.scrapTypeId = t.Id;
            dto.name = t.Name;
            dto.totalValue = String.valueOf((limitValue == null ? 0 : limitValue).setScale(1));
            dto.incoming   = String.valueOf((fact       == null ? 0 : fact).setScale(1));
            dto.remaining  = String.valueOf((rem        == null ? 0 : rem).setScale(1));

            out.add(dto);
        }
        return out;
    }


    public class MonthTotalsDTO {
        @AuraEnabled public Id scrapTypeId { get; set; }
        @AuraEnabled public String name { get; set; }
        @AuraEnabled public String totalValue { get; set; }
        @AuraEnabled public String incoming { get; set; }   // +++
        @AuraEnabled public String remaining { get; set; }  // +++
    }

    @AuraEnabled(cacheable=false)
    public static List<MonthTotalsDTO> getMonthTotalsByMonth(Id monthId) {
        if (monthId == null) return new List<MonthTotalsDTO>();

        // 1) –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–µ–∫–∞–¥–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è
        List<Decade__c> decadeNodes = [
                SELECT Id
                FROM Decade__c
                WHERE Parent__c = :monthId
        ];
        if (decadeNodes.isEmpty()) return new List<MonthTotalsDTO>();

        Set<Id> decadeIds = new Set<Id>();
        for (Decade__c d : decadeNodes) decadeIds.add(d.Id);

        // 2) –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–Ω—ñ –¥–ª—è —Ü–∏—Ö –¥–µ–∫–∞–¥
        List<Decade__c> dayNodes = [
                SELECT Id, Date__c
                FROM Decade__c
                WHERE Parent__c IN :decadeIds
        ];
        if (dayNodes.isEmpty()) return new List<MonthTotalsDTO>();

    Set<Id> dayIds = new Set<Id>();
    Set<Date> dayDates = new Set<Date>();
    for (Decade__c d : dayNodes) {
        dayIds.add(d.Id);
        if (d.Date__c != null) dayDates.add(d.Date__c);
    }

    // —Å—É–º–∞ –ª—ñ–º—ñ—Ç—ñ–≤
    Map<Id, Decimal> totalsByType = new Map<Id, Decimal>();
    for (AggregateResult ar : [
        SELECT ScrapType__c st, SUM(DayLimit__c) s
        FROM ScrapDecadesLimit__c
        WHERE DayLookup__c IN :dayIds
        GROUP BY ScrapType__c
    ]) {
        Id st = (Id) ar.get('st');
        if (st != null) totalsByType.put(st, (Decimal) ar.get('s'));
    }

    // –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è: Weight__c
    Map<Id, Decimal> incomingByType = new Map<Id, Decimal>();
    for (AggregateResult ar : [
        SELECT ScrapType__c st, SUM(Weight__c) w
        FROM ScrapSlotReserve__c
        WHERE ReserveDate__c IN :dayDates
          AND IsCancelled__c = false
          AND Weight__c != null
        GROUP BY ScrapType__c
    ]) {
        Id st = (Id) ar.get('st');
        if (st != null) incomingByType.put(st, (Decimal) ar.get('w'));
    }
    // + Tonnage__c, –¥–µ Weight__c = null
    for (AggregateResult ar : [
        SELECT ScrapType__c st, SUM(Tonnage__c) t
        FROM ScrapSlotReserve__c
        WHERE ReserveDate__c IN :dayDates
          AND IsCancelled__c = false
          AND Weight__c = null
          AND Tonnage__c != null
        GROUP BY ScrapType__c
    ]) {
        Id st = (Id) ar.get('st');
        if (st == null) continue;
        Decimal curr = incomingByType.containsKey(st) ? incomingByType.get(st) : 0;
        incomingByType.put(st, curr + (Decimal) ar.get('t'));
    }

        // 4) –£—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∏–ø–∏
        List<ScrapType__c> types = [
                SELECT Id, Name
                FROM ScrapType__c
                WHERE IsActive__c = true
                ORDER BY Name
        ];

    // –∑–±–∏—Ä–∞—î–º–æ DTO
    List<MonthTotalsDTO> out = new List<MonthTotalsDTO>();
    for (ScrapType__c t : types) {
        Decimal lim = totalsByType.get(t.Id);
        Decimal inc = incomingByType.get(t.Id);
        Decimal rem = (lim == null ? 0 : lim) - (inc == null ? 0 : inc);

        MonthTotalsDTO dto = new MonthTotalsDTO();
        dto.scrapTypeId = t.Id;
        dto.name        = t.Name;
        dto.totalValue  = String.valueOf((lim == null ? 0 : lim).setScale(1));
        dto.incoming    = String.valueOf(((inc == null ? 0 : inc)).setScale(1));
        dto.remaining   = String.valueOf(rem.setScale(1));
        out.add(dto);
    }
    return out;
}


    public class YearTotalsDTO {
        @AuraEnabled public Id scrapTypeId { get; set; }
        @AuraEnabled public String name { get; set; }
        @AuraEnabled public String totalValue { get; set; }
        @AuraEnabled public String incoming { get; set; }   // +++
        @AuraEnabled public String remaining { get; set; }  // +++
    }

    @AuraEnabled(cacheable=false)
    public static List<YearTotalsDTO> getYearTotalsByYear(Id yearId) {
        System.debug('yearId: ' + yearId);
        if (yearId == null) return new List<YearTotalsDTO>();

        // 1) –í—Å—ñ –º—ñ—Å—è—Ü—ñ —Ü—å–æ–≥–æ —Ä–æ–∫—É
        List<Decade__c> monthNodes = [
                SELECT Id, Date__c
                FROM Decade__c
                WHERE Parent__c = :yearId
        ];
        if (monthNodes.isEmpty()) return new List<YearTotalsDTO>();

        Set<Id> monthIds = new Set<Id>();
        for (Decade__c m : monthNodes) monthIds.add(m.Id);

        // 2) –í—Å—ñ –¥–µ–∫–∞–¥–∏ —Ü–∏—Ö –º—ñ—Å—è—Ü—ñ–≤
        List<Decade__c> decadeNodes = [
                SELECT Id
                FROM Decade__c
                WHERE Parent__c IN :monthIds
        ];
        if (decadeNodes.isEmpty()) return new List<YearTotalsDTO>();

        Set<Id> decadeIds = new Set<Id>();
        for (Decade__c d : decadeNodes) decadeIds.add(d.Id);

        // 3) –í—Å—ñ –¥–Ω—ñ —Ü–∏—Ö –¥–µ–∫–∞–¥
        List<Decade__c> dayNodes = [
                SELECT Id, Date__c
                FROM Decade__c
                WHERE Parent__c IN :decadeIds
        ];
        if (dayNodes.isEmpty()) return new List<YearTotalsDTO>();

    Set<Id> dayIds = new Set<Id>();
    Set<Date> dayDates = new Set<Date>();
    for (Decade__c d : dayNodes) {
        dayIds.add(d.Id);
        if (d.Date__c != null) dayDates.add(d.Date__c);
    }

    // —Å—É–º–∞ –ª—ñ–º—ñ—Ç—ñ–≤
    Map<Id, Decimal> totalsByType = new Map<Id, Decimal>();
    for (AggregateResult ar : [
        SELECT ScrapType__c st, SUM(DayLimit__c) s
        FROM ScrapDecadesLimit__c
        WHERE DayLookup__c IN :dayIds
        GROUP BY ScrapType__c
    ]) {
        Id st = (Id) ar.get('st');
        if (st != null) totalsByType.put(st, (Decimal) ar.get('s'));
    }

    // –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è (Weight__c + Tonnage__c –¥–µ Weight__c = null)
    Map<Id, Decimal> incomingByType = new Map<Id, Decimal>();
    for (AggregateResult ar : [
        SELECT ScrapType__c st, SUM(Weight__c) w
        FROM ScrapSlotReserve__c
        WHERE ReserveDate__c IN :dayDates
          AND IsCancelled__c = false
          AND Weight__c != null
        GROUP BY ScrapType__c
    ]) {
        Id st = (Id) ar.get('st');
        if (st != null) incomingByType.put(st, (Decimal) ar.get('w'));
    }
    for (AggregateResult ar : [
        SELECT ScrapType__c st, SUM(Tonnage__c) t
        FROM ScrapSlotReserve__c
        WHERE ReserveDate__c IN :dayDates
          AND IsCancelled__c = false
          AND Weight__c = null
          AND Tonnage__c != null
        GROUP BY ScrapType__c
    ]) {
        Id st = (Id) ar.get('st');
        if (st == null) continue;
        Decimal curr = incomingByType.containsKey(st) ? incomingByType.get(st) : 0;
        incomingByType.put(st, curr + (Decimal) ar.get('t'));
    }

        // 5) –£—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∏–ø–∏
        List<ScrapType__c> types = [
                SELECT Id, Name
                FROM ScrapType__c
                WHERE IsActive__c = true
                ORDER BY Name
        ];

    // –∑–±–∏—Ä–∞—î–º–æ DTO
    List<YearTotalsDTO> out = new List<YearTotalsDTO>();
    for (ScrapType__c t : types) {
        Decimal lim = totalsByType.get(t.Id);
        Decimal inc = incomingByType.get(t.Id);
        Decimal rem = (lim == null ? 0 : lim) - (inc == null ? 0 : inc);

        YearTotalsDTO dto = new YearTotalsDTO();
        dto.scrapTypeId = t.Id;
        dto.name        = t.Name;
        dto.totalValue  = String.valueOf((lim == null ? 0 : lim).setScale(1));
        dto.incoming    = String.valueOf(((inc == null ? 0 : inc)).setScale(1));
        dto.remaining   = String.valueOf(rem.setScale(1));
        out.add(dto);
    }
    return out;
}

    @AuraEnabled
    public static SaveDayLimitsResult copyDayLimits(
            Id sourceDayDecadeId,
            List<Id> targetDayDecadeIds,
            List<DayLimitUpsertItem> items,
            Boolean skipZeros,
            List<Id> onlyTypeIds
    ) {
        SaveDayLimitsResult res = new SaveDayLimitsResult();
        res.inserted = 0; res.updated = 0; res.totalProcessed = 0; res.messages = new List<String>();

        if (sourceDayDecadeId == null) {
            throw new AuraHandledException('–ù–µ –≤–∫–∞–∑–∞–Ω–æ –¥–∂–µ—Ä–µ–ª—å–Ω–∏–π –¥–µ–Ω—å.');
        }
        if (targetDayDecadeIds == null || targetDayDecadeIds.isEmpty()) {
            res.messages.add('–ù–µ –æ–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ—ó —Ü—ñ–ª—ñ.');
            return res;
        }

        // 1) –î–∂–µ—Ä–µ–ª–æ —Ç–∞ —Ü—ñ–ª—ñ
        Decade__c src = [
                SELECT Id, Date__c, Parent__c
                FROM Decade__c
                WHERE Id = :sourceDayDecadeId
                LIMIT 1
        ];
        if (src.Date__c == null) throw new AuraHandledException('–£ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è –¥–∞—Ç–∞.');

        List<Decade__c> targets = [
                SELECT Id, Date__c
                FROM Decade__c
                WHERE Id IN :targetDayDecadeIds
        ];

        // Apex-—Å—Ç–∏–ª—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: –±–µ–∑ stream/->
        List<Decade__c> filteredTargets = new List<Decade__c>();
        for (Decade__c t : targets) {
            if (t.Date__c != null) filteredTargets.add(t);
        }
        if (filteredTargets.isEmpty()) {
            res.messages.add('–£ –≤–∏–±—Ä–∞–Ω–∏—Ö –¥–Ω—è—Ö –Ω–µ–º–∞—î –¥–∞—Ç.');
            return res;
        }

        // 2) –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: –∞–±–æ –∑ UI (—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è), –∞–±–æ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –¥–Ω—è-–¥–∂–µ—Ä–µ–ª–∞
        Map<Id, Decimal> valuesByType = new Map<Id, Decimal>();

        if (items != null && !items.isEmpty()) {
            for (DayLimitUpsertItem it : items) {
                if (it == null || it.scrapTypeId == null) continue;
                Decimal parsed = String.isBlank(it.value) ? 0 : parseOneDecimal(it.value);
                if (skipZeros && (parsed == null || parsed == 0)) continue;
                valuesByType.put(it.scrapTypeId, (parsed == null ? 0 : parsed));
            }
        } else {
            // —è–∫—â–æ –∑ UI –Ω–µ –ø—Ä–∏–π—à–ª–∏ items ‚Äî —á–∏—Ç–∞—î–º–æ —ñ–∑ –¥–∂–µ—Ä–µ–ª–∞
            List<ScrapDecadesLimit__c> srcLimits;
            if (onlyTypeIds != null && !onlyTypeIds.isEmpty()) {
                srcLimits = [
                        SELECT ScrapType__c, DayLimit__c
                        FROM ScrapDecadesLimit__c
                        WHERE LimitDate__c = :src.Date__c
                        AND ScrapType__c IN :onlyTypeIds
                ];
            } else {
                srcLimits = [
                        SELECT ScrapType__c, DayLimit__c
                        FROM ScrapDecadesLimit__c
                        WHERE LimitDate__c = :src.Date__c
                ];
            }
            for (ScrapDecadesLimit__c l : srcLimits) {
                if (l.ScrapType__c == null) continue;
                Decimal v = (l.DayLimit__c == null ? 0 : l.DayLimit__c.setScale(1));
                if (skipZeros && v == 0) continue;
                valuesByType.put(l.ScrapType__c, v);
            }
        }

        if (valuesByType.isEmpty()) {
            res.messages.add('–ù–µ–º–∞—î –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è.');
            return res;
        }

        // 3) –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ü—ñ–ª—è—Ö (–¥–ª—è upsert-–ø–æ–≤–µ–¥—ñ–Ω–∫–∏)
        Set<Date> targetDates = new Set<Date>();
        Map<Date, Id> dayIdByDate = new Map<Date, Id>();
        for (Decade__c t : filteredTargets) {
            targetDates.add(t.Date__c);
            dayIdByDate.put(t.Date__c, t.Id);
        }

        Set<Id> typeIds = valuesByType.keySet();

        Map<String, ScrapDecadesLimit__c> existingByKey = new Map<String, ScrapDecadesLimit__c>();
        if (!targetDates.isEmpty() && !typeIds.isEmpty()) {
            for (ScrapDecadesLimit__c l : [
                    SELECT Id, ScrapType__c, DayLimit__c, LimitDate__c, DayLookup__c
                    FROM ScrapDecadesLimit__c
                    WHERE LimitDate__c IN :targetDates
                    AND ScrapType__c IN :typeIds
            ]) {
                String key = makeKey(l.LimitDate__c, l.ScrapType__c);
                existingByKey.put(key, l);
            }
        }

        // 4) –ü–æ–±—É–¥–æ–≤–∞ toInsert / toUpdate
        List<ScrapDecadesLimit__c> toInsert = new List<ScrapDecadesLimit__c>();
        List<ScrapDecadesLimit__c> toUpdate = new List<ScrapDecadesLimit__c>();

        for (Date d : targetDates) {
            for (Id stId : typeIds) {
                Decimal v = valuesByType.get(stId);
                if (skipZeros && (v == null || v == 0)) continue;

                String key = makeKey(d, stId);
                if (existingByKey.containsKey(key)) {
                    ScrapDecadesLimit__c upd = existingByKey.get(key);
                    upd.DayLimit__c = (v == null ? 0 : v.setScale(1));
                    if (dayIdByDate.containsKey(d)) upd.DayLookup__c = dayIdByDate.get(d);
                    toUpdate.add(upd);
                } else {
                    ScrapDecadesLimit__c ins = new ScrapDecadesLimit__c();
                    ins.ScrapType__c = stId;
                    ins.DayLimit__c  = (v == null ? 0 : v.setScale(1));
                    ins.LimitDate__c = d;
                    if (dayIdByDate.containsKey(d)) ins.DayLookup__c = dayIdByDate.get(d);
                    toInsert.add(ins);
                }
            }
        }

        System.debug('SOQL before DML = ' + Limits.getQueries());

        if (!toInsert.isEmpty()) { insert toInsert; res.inserted = toInsert.size(); }
        if (!toUpdate.isEmpty()) { update toUpdate; res.updated = toUpdate.size(); }
        System.debug('SOQL after DML  = ' + Limits.getQueries());

        res.totalProcessed = res.inserted + res.updated;

        res.messages.add('–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ.');
        return res;
    }

    // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á: –¥–∞—Ç–∞ + —Ç–∏–ø –±—Ä—É—Ö—Ç—É
    private static String makeKey(Date d, Id typeId) {
        return String.valueOf(d) + '|' + String.valueOf(typeId);
    }

    public class DayOptionDTO {
        @AuraEnabled public Id id { get; set; }
        @AuraEnabled public Date dateValue { get; set; }
        @AuraEnabled public String label { get; set; }   // "dd.MM.yyyy (–ü–Ω)"
        @AuraEnabled public Boolean hasLimits { get; set; }
        @AuraEnabled public Boolean isWeekend { get; set; } // ‚Üê –ù–û–í–ï

    }

//    @AuraEnabled(cacheable=false)
//    public static List<DayOptionDTO> listSiblingDays(Id sourceDayDecadeId) {
//        List<DayOptionDTO> out = new List<DayOptionDTO>();
//        if (sourceDayDecadeId == null) return out;
//
//        Decade__c day = [
//                SELECT Id, Parent__c, Date__c
//                FROM Decade__c
//                WHERE Id = :sourceDayDecadeId
//                LIMIT 1
//        ];
//        if (day.Parent__c == null) return out;
//
//        List<Decade__c> siblings = [
//                SELECT Id, Date__c
//                FROM Decade__c
//                WHERE Parent__c = :day.Parent__c
//                ORDER BY Date__c ASC
//        ];
//
//        Set<Date> dates = new Set<Date>();
//        for (Decade__c d : siblings) if (d.Date__c != null) dates.add(d.Date__c);
//
//        Map<Date, Integer> cntByDate = new Map<Date, Integer>();
//        if (!dates.isEmpty()) {
//            for (AggregateResult ar : [
//                    SELECT LimitDate__c d, COUNT(Id) c
//                    FROM ScrapDecadesLimit__c
//                    WHERE LimitDate__c IN :dates
//                    GROUP BY LimitDate__c
//            ]) {
//                cntByDate.put((Date)ar.get('d'), (Integer)ar.get('c'));
//            }
//        }
//
//        for (Decade__c d : siblings) {
//            if (d.Id == sourceDayDecadeId) continue;
//            DayOptionDTO dto = new DayOptionDTO();
//            dto.id = d.Id;
//            dto.dateValue = d.Date__c;  // –±—É–ª–æ: dto.date
//
//            dto.hasLimits = (d.Date__c != null && cntByDate.containsKey(d.Date__c) && cntByDate.get(d.Date__c) > 0);
//
//            if (d.Date__c == null) {
//                dto.label = '‚Äî';
//            } else {
//                // –ü–æ–±—É–¥–æ–≤–∞ dd.MM.yyyy
//                String dateStr = twoDigits(d.Date__c.day()) + '.' + twoDigits(d.Date__c.month()) + '.' + String.valueOf(d.Date__c.year());
//                // –î–µ–Ω—å —Ç–∏–∂–Ω—è —á–µ—Ä–µ–∑ Datetime.format(pattern, locale)
//                Datetime dt = Datetime.newInstance(d.Date__c, Time.newInstance(0, 0, 0, 0));
//                String dowUk = dt.format('E', 'uk'); // –Ω–∞–ø—Ä. "–ø–Ω", "–≤—Ç", ...
//
//                dto.label = dateStr + ' (' + dowUk + ')';
//            }
//            out.add(dto);
//        }
//
//        return out;
//    }

    @AuraEnabled(cacheable=false)
    public static List<DayOptionDTO> listSiblingDays(Id sourceDayDecadeId) {
        List<DayOptionDTO> out = new List<DayOptionDTO>();
        if (sourceDayDecadeId == null) return out;

        Decade__c day = [
                SELECT Id, Parent__c, Date__c
                FROM Decade__c
                WHERE Id = :sourceDayDecadeId
                LIMIT 1
        ];
        if (day.Parent__c == null) return out;

        List<Decade__c> siblings = [
                SELECT Id, Date__c
                FROM Decade__c
                WHERE Parent__c = :day.Parent__c
                ORDER BY Date__c ASC
        ];

        Set<Date> dates = new Set<Date>();
        for (Decade__c d : siblings) if (d.Date__c != null) dates.add(d.Date__c);

        Map<Date, Integer> cntByDate = new Map<Date, Integer>();
        if (!dates.isEmpty()) {
            for (AggregateResult ar : [
                    SELECT LimitDate__c d, COUNT(Id) c
                    FROM ScrapDecadesLimit__c
                    WHERE LimitDate__c IN :dates
                    GROUP BY LimitDate__c
            ]) {
                cntByDate.put((Date) ar.get('d'), (Integer) ar.get('c'));
            }
        }

        for (Decade__c d : siblings) {
            if (d.Id == sourceDayDecadeId) continue;

            DayOptionDTO dto = new DayOptionDTO();
            dto.id        = d.Id;
            dto.dateValue = d.Date__c;

            dto.hasLimits = (d.Date__c != null
                    && cntByDate.containsKey(d.Date__c)
                    && cntByDate.get(d.Date__c) > 0);

            if (d.Date__c == null) {
                dto.label = '‚Äî';
                dto.isWeekend = false;
            } else {
                // WEEKDAY-—Å—Ç–∏–ª—å: 1=–ù–¥ ‚Ä¶ 7=–°–±
                Integer wd = weekday(d.Date__c);
                dto.isWeekend = (wd != null && (wd == 1 || wd == 7)); // –ù–¥ –∞–±–æ –°–±

                // –õ–µ–π–±–ª "dd.MM.yyyy (–ø–Ω/–≤—Ç/‚Ä¶)" ‚Äì –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –ª–∏—à–∞—î–º–æ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫-–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω—ñ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è
                String dateStr = twoDigits(d.Date__c.day()) + '.' + twoDigits(d.Date__c.month()) + '.' + String.valueOf(d.Date__c.year());
                String dowUk   = dowNameUkMonBased(dayOfWeekMonBased(d.Date__c)); // '–ø–Ω','–≤—Ç',...
                dto.label = dateStr + ' (' + dowUk + ')';
            }
            out.add(dto);
        }
        return out;
    }

    /** 1=–ü–Ω ‚Ä¶ 7=–ù–¥. –í–∏—Ä–∞—Ö–æ–≤–∞–Ω–æ —Å—Ç–∞–±—ñ–ª—å–Ω–æ —É GMT (–ø–æ–ª—É–¥–µ–Ω—å, —â–æ–± –Ω–µ –∑—Å—É–≤–∞—Ç–∏ –¥–∞—Ç—É). */
    public static Integer dayOfWeekMonBased(Date d) {
        if (d == null) return null;
        Datetime dtGmt = Datetime.newInstanceGmt(d, Time.newInstance(12, 0, 0, 0));
        return Integer.valueOf(dtGmt.formatGmt('u')); // 'u' => 1..7 (Mon..Sun)
    }

    /** –ê–Ω–∞–ª–æ–≥ WEEKDAY(): 1=–ù–¥, 2=–ü–Ω, ‚Ä¶, 7=–°–±. */
    public static Integer weekday(Date d) {
        Integer monBased = dayOfWeekMonBased(d); // 1=–ü–Ω ‚Ä¶ 7=–ù–¥
        if (monBased == null) return null;
        return (monBased == 7) ? 1 : (monBased + 1); // –∑—Ä—É—à—É—î–º–æ, —â–æ–± 1 —Å—Ç–∞–≤ –ù–¥
    }

    /** –í–∏—Ö—ñ–¥–Ω—ñ –∑–∞ –ª–æ–≥—ñ–∫–æ—é WEEKDAY(): –ù–¥(1) —Ç–∞ –°–±(7). */
    public static Boolean isWeekend(Date d) {
        Integer wd = weekday(d);
        return wd != null && (wd == 1 || wd == 7);
    }

    /** –ö–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞ –¥–Ω—è —É–∫—Ä. –º–æ–≤–æ—é –¥–ª—è 1=–ü–Ω ‚Ä¶ 7=–ù–¥ (–º–æ–Ω-–ø–æ—Ö—ñ–¥–Ω–∞). */
    private static String dowNameUkMonBased(Integer dow) {
        if (dow == null) return '';
        switch on dow {
            when 1 { return '–ø–Ω'; }
            when 2 { return '–≤—Ç'; }
            when 3 { return '—Å—Ä'; }
            when 4 { return '—á—Ç'; }
            when 5 { return '–ø—Ç'; }
            when 6 { return '—Å–±'; }
            when 7 { return '–Ω–¥'; }
            when else { return ''; }
        }
    }


    // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –º–∞–ø: –¥–∞—Ç–∞ + —Ç–∏–ø


// –ü–∞–¥—ñ–Ω–≥ –¥–æ 2 —Ü–∏—Ñ—Ä
    private static String twoDigits(Integer n) {
        if (n == null) return '00';
        String s = String.valueOf(n);
        return (s.length() == 1) ? '0' + s : s;
    }

    public static void FakeCoverageMethod() {
        Integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

    }
}