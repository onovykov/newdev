@IsTest
public class CrossMarket_TestDataFactory {

    // --- JobTitle helper —á–µ—Ä–µ–∑ SysUtils ---
    private static String jobTitleApi(String jobTitleLabel) {
        Map<String,String> labelToValue = SysUtils.getPicklistFieldMap('User', 'JobTitle__c', false);
        return labelToValue.get(jobTitleLabel);
    }

    // ========= Picklist helpers (–ê–ö–¢–ò–í–ù–Ü –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ –ø–æ–ª—ñ) =========

    // 1) –ü–µ—Ä—à–µ –ê–ö–¢–ò–í–ù–ï API-–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—é—é—á–æ–≥–æ –ø–æ–ª—è User.BusinesDivision__c
    public static String firstActiveUserBusinessDivisionApi() {
        Schema.DescribeFieldResult dfr =
            Schema.getGlobalDescribe().get('User')
                  .getDescribe().fields.getMap().get('BusinesDivision__c').getDescribe();
        for (Schema.PicklistEntry pe : dfr.getPicklistValues()) {
            if (pe.isActive()) return pe.getValue();
        }
        return null;
    }

    // 2) –ü–µ—Ä—à–µ –ê–ö–¢–ò–í–ù–ï API-–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ–≥–æ –ø–æ–ª—è User.SalesDivision__c
    public static String firstActiveUserSalesDivisionApi() {
        Schema.DescribeFieldResult dfr =
            Schema.getGlobalDescribe().get('User')
                  .getDescribe().fields.getMap().get('SalesDivision__c').getDescribe();
        for (Schema.PicklistEntry pe : dfr.getPicklistValues()) {
            if (pe.isActive()) return pe.getValue(); // –Ω–∞–ø—Ä., '00002'
        }
        return null;
    }

    // 3) –ü–µ—Ä—à–µ –ê–ö–¢–ò–í–ù–ï API –∑—ñ —Å–ø–∏—Å–∫—É Opp.CrossMarketSegment__c, —è–∫–µ –ù–ï –¥–æ—Ä—ñ–≤–Ω—é—î avoidApi
    public static String firstActiveOppSegmentApiNotEqual(String avoidApi) {
        Schema.DescribeFieldResult dfr =
            Schema.getGlobalDescribe().get('Opportunity')
                  .getDescribe().fields.getMap().get('CrossMarketSegment__c').getDescribe();
        for (Schema.PicklistEntry pe : dfr.getPicklistValues()) {
            if (pe.isActive() && pe.getValue() != avoidApi) {
                return pe.getValue();
            }
        }
        return null;
    }

    // ========= Profiles =========
    private static Id profileId(Boolean isAdmin){
        return [
            SELECT Id FROM Profile
            WHERE Name = : (isAdmin ? 'System Administrator' : 'Standard User')
            LIMIT 1
        ].Id;
    }

    // ========= Users =========
    // –í–ê–ñ–õ–ò–í–û: —Å–ø–æ—á–∞—Ç–∫—É —Å—Ç–∞–≤–∏–º–æ BusinesDivision__c (–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä), –ø–æ—Ç—ñ–º SalesDivision__c (dependent)
    public static User makeUser(String alias, String email, String jobTitleLabel, String salesDivisionApi, Boolean isAdmin) {
        String jtApi  = jobTitleApi(jobTitleLabel);
        String bdApi  = firstActiveUserBusinessDivisionApi();
        System.assertNotEquals(null, bdApi, 'User.BusinesDivision__c –º–∞—î –º–∞—Ç–∏ —Ö–æ—á –æ–¥–Ω–µ –∞–∫—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è');

        User u = new User(
            FirstName='T', LastName=alias, Alias=alias.left(8),
            Email=email,
            Username=email + '.' + System.currentTimeMillis() + '@test.org',
            TimeZoneSidKey='Europe/Warsaw', LocaleSidKey='en_US',
            EmailEncodingKey='UTF-8', LanguageLocaleKey='en_US',
            ProfileId=profileId(isAdmin),
            IsActive=true,
            JobTitle__c         = jtApi,   // picklist API (User)
            BusinesDivision__c = bdApi,   // üî∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–µ –ø–æ–ª–µ ‚Äî –°–ü–û–ß–ê–¢–ö–£!
            SalesDivision__c    = salesDivisionApi // üî∏ dependent picklist ‚Äî –ü–Ü–°–õ–Ø –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
        );
        insert u;
        return u;
    }

    // ========= Opportunities =========
    public static Opportunity makeOpp(
        User owner,
        String name,
        Date closeDt,
        String stage,
        Id crossMgrId,
        String mainMarketSegApi,   // Opp.MarketSegment__c (API)
        String crossMarketSegApi,  // Opp.CrossMarketSegment__c (API)
        Decimal crossShare
    ) {
        Opportunity o = new Opportunity(
            Name = name,
            CloseDate = closeDt,
            StageName = stage,
            OwnerId = owner.Id,
            MarketSegment__c      = mainMarketSegApi,   // –≥–æ–ª–æ–≤–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
            CrossMarketSegment__c = crossMarketSegApi,  // –∫—Ä–æ—Å-—Å–µ–≥–º–µ–Ω—Ç (—ñ–Ω—à–∏–π)
            CrossMarketManager__c = crossMgrId,
            CrossMarketShare__c   = crossShare
        );
        insert o;
        return o;
    }
}