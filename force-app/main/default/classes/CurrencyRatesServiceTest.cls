@IsTest(SeeAllData=true)
private class CurrencyRatesServiceTest {

    // –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤–∏–∫–ª–∏–∫—ñ–≤
    private static Integer nbuCalls        = 0;
    private static Integer patchCtSession  = 0;
    private static Integer patchCtNc       = 0;
    private static Integer postDcrSession  = 0;
    private static Integer patchDcrSession = 0;
    private static Integer postDcrNc       = 0;
    private static Integer patchDcrNc      = 0;

    // –ú–æ–∫ HTTP –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é
    private class RouterMock implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            String ep = req.getEndpoint();

            // 1) –ù–ë–£
            if (ep != null && ep.startsWith('https://bank.gov.ua')) {
                CurrencyRatesServiceTest.nbuCalls++;
                res.setStatusCode(200);
                // USD (corporate) + EUR
                res.setBody('[{"r030":840,"txt":"US Dollar","rate":41.3722,"cc":"USD","exchangedate":"03.09.2025"},' +
                            ' {"r030":978,"txt":"Euro","rate":45.0000,"cc":"EUR","exchangedate":"03.09.2025"}]');
                return res;
            }

            Boolean isNC = (ep != null && ep.startsWith('callout:Interpipe_Self_Org'));
            Boolean isSF = (ep != null && !ep.startsWith('callout:') && ep.contains('/services/data/'));

            // 2) CurrencyType (PATCH)
            if (ep != null && ep.contains('/sobjects/CurrencyType/')) {
                if (isNC) CurrencyRatesServiceTest.patchCtNc++;
                if (isSF) CurrencyRatesServiceTest.patchCtSession++;
                res.setStatusCode(204); // No Content
                res.setBody('');
                return res;
            }

            // 3) DatedConversionRate (POST / PATCH)
            if (ep != null && ep.endsWith('/sobjects/DatedConversionRate')) {
                if (isNC) CurrencyRatesServiceTest.postDcrNc++;
                if (isSF) CurrencyRatesServiceTest.postDcrSession++;
                res.setStatusCode(201);
                res.setBody('{"id":"a01XXXXXXXXXXXX"}');
                return res;
            }
            if (ep != null && ep.contains('/sobjects/DatedConversionRate/')) {
                if (isNC) CurrencyRatesServiceTest.patchDcrNc++;
                if (isSF) CurrencyRatesServiceTest.patchDcrSession++;
                res.setStatusCode(204);
                res.setBody('');
                return res;
            }

            // –¥–µ—Ñ–æ–ª—Ç
            res.setStatusCode(200);
            res.setBody('{}');
            return res;
        }
    }

    // –ú–æ–∫ HTTP –¥–ª—è –ø–æ–º–∏–ª–∫–∏ –∑ –±–æ–∫—É –ù–ë–£ (—â–æ–± –ø–æ–∫—Ä–∏—Ç–∏ –≥—ñ–ª–∫—É non-200 —É getNBURates)
    private class BankErrorMock implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            String ep = req.getEndpoint();
            if (ep != null && ep.startsWith('https://bank.gov.ua')) {
                res.setStatusCode(500);
                res.setBody('Internal Error');
                return res;
            }
            res.setStatusCode(200);
            res.setBody('{}');
            return res;
        }
    }

    @IsTest
    static void test_GetNBURates_and_Apply_CT_Session() {
        resetCounters();
        Test.setMock(HttpCalloutMock.class, new RouterMock());

        Test.startTest();
        // 1) –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –∑ –ù–ë–£
        List<CurrencyRatesService.RatesPayload> pl = CurrencyRatesService.getNBURates();
        System.assert(pl != null && !pl.isEmpty(), 'NBURates should not be empty');

        // 2) –ü–∏—à–µ–º–æ –≤ CurrencyType —á–µ—Ä–µ–∑ SessionId
        CurrencyRatesService.applyRatesViaSessionIdToCurrencyType(pl);
        Test.stopTest();

        System.assert(nbuCalls > 0, 'Expected NBU call');
        System.assert(patchCtSession > 0 || patchCtNc > 0,
            'Expected at least one CurrencyType PATCH via Session or NC');
    }

    @IsTest
    static void test_Auto_And_DCR_Branches_And_Previews() {
        resetCounters();
        Test.setMock(HttpCalloutMock.class, new RouterMock());

        List<CurrencyRatesService.RatesPayload> pl = CurrencyRatesService.getNBURates();

        Test.startTest();
        // –ê–≤—Ç–æ-–≥—ñ–ª–∫–∞ (–ø—ñ–¥–µ –≤ CT –∞–±–æ DCR, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ ACM/–ø—Ä–∞–≤)
        CurrencyRatesService.applyRates(pl);

        // –ü—Ä–∏–º—É—Å–æ–≤–æ –≤ DCR —á–µ—Ä–µ–∑ SessionId
        CurrencyRatesService.applyRatesViaSessionIdToDCR(pl);

        // –•–µ–ª–ø–µ—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—É/–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        CurrencyRatesService.previewDcrHumanEffective(Date.today(), 5);
        CurrencyRatesService.verifyLastRun(Date.today());
        Test.stopTest();

        System.assert(nbuCalls > 0, 'Expected at least one NBU call');
        // DCR –≤–∏–∫–ª–∏–∫–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ 0, —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏—à–µ corporate ‚Äî —Ü–µ –Ω–æ—Ä–º.
    }

    // üîπ –ß–∏—Å—Ç–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –±–µ–∑ Named Credential ‚Äî –ª–∏—à–µ SessionId-–≤–∏–∫–ª–∏–∫–∏
    @IsTest
    static void test_SessionOnly_NoNC() {
        resetCounters();
        Test.setMock(HttpCalloutMock.class, new RouterMock());

        Test.startTest();
        List<CurrencyRatesService.RatesPayload> pl = CurrencyRatesService.getNBURates();

        // –ó–∞–ø–∏—Å –ª–∏—à–µ —á–µ—Ä–µ–∑ SessionId-—à–ª—è—Ö
        CurrencyRatesService.applyRatesViaSessionIdToCurrencyType(pl);
        CurrencyRatesService.applyRatesViaSessionIdToDCR(pl);
        Test.stopTest();

        // –û—á—ñ–∫—É—î–º–æ, —â–æ –±—É–ª–∏ session-–≤–∏–∫–ª–∏–∫–∏...
        System.assert(patchCtSession > 0 || postDcrSession > 0 || patchDcrSession > 0,
            'Expected at least one SessionId callout (CT or DCR)');

        // ...—ñ —â–æ –ù–ï –±—É–ª–æ –∂–æ–¥–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É —á–µ—Ä–µ–∑ NC
        System.assertEquals(0, patchCtNc, 'NC (CT) should not be called');
        System.assertEquals(0, postDcrNc, 'NC (DCR POST) should not be called');
        System.assertEquals(0, patchDcrNc, 'NC (DCR PATCH) should not be called');
    }

    // üîπ –ù–û–í–ï: –∞–≤—Ç–æ-—Å–µ—Å—ñ–π–Ω–∏–π —à–ª—è—Ö + exact-date –ø—Ä–µ–≤‚Äô—é + –ø–æ–∫—Ä–∏—Ç—Ç—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö/–Ω—É–ª—å–æ–≤–∏—Ö –ø—Ä–µ–≤‚Äô—é
    @IsTest
    static void test_ApplySessionAuto_And_PreviewsExactAndEmpty() {
        resetCounters();
        Test.setMock(HttpCalloutMock.class, new RouterMock());

        List<CurrencyRatesService.RatesPayload> pl = CurrencyRatesService.getNBURates();

        Test.startTest();
        // –ê–≤—Ç–æ-—Å–µ—Å—ñ–π–Ω–∏–π —à–ª—è—Ö
        CurrencyRatesService.applyRatesViaSessionId(pl);

        // Exact-date –ø—Ä–µ–≤‚Äô—é (–º–æ–∂–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ–∫–∞–∑–∞—Ç–∏, –∞–ª–µ –ª—ñ–Ω—ñ—ó –ø–æ–∫—Ä–∏—î)
        CurrencyRatesService.previewDcrHuman(Date.today(), 10);

        // –ü–æ–∫—Ä–∏—Ç—Ç—è —Ä–∞–Ω–Ω—ñ—Ö return —É logPreview
        CurrencyRatesService.logPreview(null, 10);
        CurrencyRatesService.logPreview(new List<CurrencyRatesService.RatesPayload>(), 10);

        // –¢–∞–∫–æ–∂ –≤–∏–∫–ª–∏—á–µ–º–æ "exact-date" —á–∏—Ç–∞–Ω–Ω—è —Å–ø–∏—Å–∫–æ–º (–±–µ–∑ –ª–æ–≥—ñ–≤)
        List<CurrencyRatesService.RatesPayload> dcrExact =
            CurrencyRatesService.getOrgRatesFromDcr(Date.today());
        Test.stopTest();

        System.assert(nbuCalls > 0, 'Expected NBU call');
        System.assertNotEquals(null, dcrExact, 'List should not be null');
    }

    // üîπ –ù–û–í–ï: –ø–æ–∫—Ä–∏–≤–∞—î–º–æ –≥—ñ–ª–∫—É –ø–æ–º–∏–ª–∫–∏ (non-200) —É getNBURates()
    @IsTest
    static void test_NBU_ErrorBranch() {
        Test.setMock(HttpCalloutMock.class, new BankErrorMock());
        Boolean thrown = false;
        try {
            CurrencyRatesService.getNBURates();
        } catch (Exception e) {
            thrown = true;
            System.assert(e.getMessage().contains('NBU API error'), 'Expected NBU API error branch');
        }
        System.assert(thrown, 'Expected exception for non-200 NBU response');
    }

    // –î–æ–ø–æ–º—ñ–∂–Ω–µ
    private static void resetCounters() {
        nbuCalls = 0;
        patchCtSession = 0;
        patchCtNc = 0;
        postDcrSession = 0;
        patchDcrSession = 0;
        postDcrNc = 0;
        patchDcrNc = 0;
    }
}