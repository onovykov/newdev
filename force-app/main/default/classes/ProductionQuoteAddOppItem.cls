global class ProductionQuoteAddOppItem implements Database.Batchable<SObject> {
	
    global Set<Id> oppItemIds = new Set<Id>();
       
    global ProductionQuoteAddOppItem(List<SObject> newList){
        for (SObject oliS : newList) {
			OpportunityLineItem oli = (OpportunityLineItem) oliS; 
            oppItemIds.add(oli.id);
        }
    }
    
    global Database.QueryLocator start(Database.BatchableContext context) {		              
        return Database.getQueryLocator('SELECT Id, Name, OpportunityId, CDD__c, FinalCDD__c, Quota_Date__c, CreatedDate, Product2Id, Quantity, Shop__c, ITENumber__c,Opportunity.OwnerId, Opportunity.MarketSegment__c, QuotaType__c, Balance_t__c FROM OpportunityLineItem WHERE id in :oppItemIds AND Balance_t__c!=0' );
	}
    
    global void execute(Database.BatchableContext context, List<OpportunityLineItem> scope) {
        //system.debug('ProductionQuoteAddOppItem run');
        
        for(OpportunityLineItem item : scope){
            
            try{       
        //OpportunityLineItem oppItem = scope[0];
        OpportunityLineItem oppItem = item;
        List<ProdQuoteToOppProduct__c> pqtopListToInsert = new List<ProdQuoteToOppProduct__c>();
        List<Production_Quota__c> pqList = [SELECT Id,Period__c FROM Production_Quota__c WHERE Sales_Manager__c=:oppItem.Opportunity.OwnerId 
                                            AND Product__c=:oppItem.Product2Id
                                            AND Market_Segment__c=:oppItem.Opportunity.MarketSegment__c 
                                            AND Quota_Type__c =:oppItem.QuotaType__c 
                                            AND Shop__c=:oppItem.Shop__c];
        if(pqList.size()>0){
            //List<ProdQuoteToOppProduct__c> existing
            for(Production_Quota__c pq:pqList){
                	Date startPeriod = pq.Period__c;
        			Date endPeriod = startPeriod.addMonths(1);
                	if((oppItem.FinalCDD__c > startPeriod || oppItem.FinalCDD__c == startPeriod) && oppItem.FinalCDD__c < endPeriod && oppItem.Balance_t__c<oppItem.Quantity){
                    	ProdQuoteToOppProduct__c newpqtop = new ProdQuoteToOppProduct__c();
                        newpqtop.Name_Opportunity_Product__c = oppItem.Name;
                        newpqtop.CDD__c = oppItem.FinalCDD__c;
                        newpqtop.Quota_Date__c = oppItem.Quota_Date__c;
                        newpqtop.Creation_Date_Opportunity_Item__c = oppItem.CreatedDate;
                        newpqtop.Product__c = oppItem.Product2Id;
                        newpqtop.Quantity__c = oppItem.Quantity;
                        newpqtop.Shop__c = oppItem.Shop__c;
                        newpqtop.ITE_Number__c = oppItem.ITENumber__c;
                        newpqtop.Production_Quota__c = pq.id;
                        newpqtop.Quota_Type__c = oppItem.QuotaType__c;
                        newpqtop.Opportunity__c = oppItem.OpportunityId;
                        newpqtop.Opportunity_Product__c = oppItem.id;
                        pqtopListToInsert.add(newpqtop);
                	}                               	
            }
        }
                if(pqtopListToInsert.size()>0){
                    //insert pqtopListToInsert;
                }
                } catch(Exception e){
                	//system.debug(e.getMessage());
            	} 
            }
            
	}
    
    global void finish(Database.BatchableContext context) {
		try{
            List<ProdQuoteToOppProduct__c> prodOppItems = [SELECT id FROM ProdQuoteToOppProduct__c WHERE Opportunity_Product__c=NULL];
        	delete prodOppItems;
        } catch(Exception e) {
    	System.debug('An exception occurred: ' + e.getMessage());
		}
	}

    public static void FakeCoverageMethod() {
        Integer i=0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}