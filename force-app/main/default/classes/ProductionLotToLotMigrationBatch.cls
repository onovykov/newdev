global class ProductionLotToLotMigrationBatch implements Database.Batchable<SObject>, Database.Stateful {

    global Database.QueryLocator start(Database.BatchableContext context) {
        System.debug('üîÑ [START] –ó–∞–ø—É—Å–∫ –±–∞—Ç—á—É –º—ñ–≥—Ä–∞—Ü—ñ—ó ProductionLot ‚Üí Lot');

        Date startDate = Date.newInstance(2023, 1, 1);
        Date endDate = Date.today();

        return Database.getQueryLocator([
                SELECT Id, LotDate__c, ITENumber__c, Order__c, OrderItem__c,
                        ProducedQuantity__c, DispatchedQuantity__c, ShippedQuantity__c
                FROM ProductionLot__c
                WHERE
                        (ProducedQuantity__c != 0 OR DispatchedQuantity__c != 0 OR ShippedQuantity__c != 0)
                        AND ITENumber__c != NULL
                        AND LotDate__c >= :startDate
                        AND LotDate__c <= :endDate
        ]);
    }

    global void execute(Database.BatchableContext context, List<ProductionLot__c> scope) {
        System.debug('‚ñ∂Ô∏è [EXECUTE] –û–±—Ä–æ–±–∫–∞ ' + scope.size() + ' –∑–∞–ø–∏—Å—ñ–≤ ProductionLot__c');
        List<Lot__c> lotsToInsert = new List<Lot__c>();

        // 1. –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –¥–∞—Ç–∏ –∑ LotDate__c
        Set<Date> lotDates = new Set<Date>();
        for (ProductionLot__c lot : scope) {
            if (lot.LotDate__c != null) {
                lotDates.add(lot.LotDate__c);
            }
        }

        // 2. –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ ProdWeeksH__c, —è–∫—ñ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—é—Ç—å —Ü—ñ –¥–∞—Ç–∏
        List<ProdWeeksH__c> prodWeeks = [
                SELECT Id, DateFrom__c, DateTo__c
                FROM ProdWeeksH__c
                WHERE DateFrom__c <= :Date.today()
                AND DateTo__c >= :Date.newInstance(2023, 1, 1)
        ];

        // 3. –ë—É–¥—É—î–º–æ –º–∞–ø—É –¥–∞—Ç–∞ ‚Üí ProdWeek__c.Id
        Map<Date, Id> prodWeekCache = new Map<Date, Id>();
        for (Date d : lotDates) {
            for (ProdWeeksH__c week : prodWeeks) {
                if (week.DateFrom__c <= d && week.DateTo__c >= d) {
                    prodWeekCache.put(d, week.Id);
                    break;
                }
            }
        }

        // 4. –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω ProductionLot
        for (ProductionLot__c oldLot : scope) {
            Map<String, Decimal> qtyByType = new Map<String, Decimal>();

            if (oldLot.ProducedQuantity__c != null && oldLot.ProducedQuantity__c != 0) {
                qtyByType.put('Produced', oldLot.ProducedQuantity__c.setScale(2));
            }
            if (oldLot.DispatchedQuantity__c != null && oldLot.DispatchedQuantity__c != 0) {
                qtyByType.put('Shipped', oldLot.DispatchedQuantity__c.setScale(2));
            }
            if (oldLot.ShippedQuantity__c != null && oldLot.ShippedQuantity__c != 0) {
                qtyByType.put('Delivered', oldLot.ShippedQuantity__c.setScale(2));
            }

            for (String lotType : qtyByType.keySet()) {
                Decimal qty = qtyByType.get(lotType);
                if (qty == null || qty == 0) continue;

                Lot__c newLot = new Lot__c();
                newLot.ITENumber__c = oldLot.ITENumber__c;
                newLot.LotDate__c = oldLot.LotDate__c;
                newLot.LotQty_t__c = qty;
                newLot.LotType__c = lotType;
                newLot.Name = oldLot.ITENumber__c + ' ' + String.valueOf(oldLot.LotDate__c) + ' ' + lotType;
                newLot.OrderItem__c = oldLot.OrderItem__c;
                newLot.Order__c = oldLot.Order__c;
                newLot.ProdWeek__c = prodWeekCache.get(oldLot.LotDate__c);

                lotsToInsert.add(newLot);
            }
        }

        // 5. –í—Å—Ç–∞–≤–∫–∞
        if (!lotsToInsert.isEmpty()) {
            insert lotsToInsert;
            System.debug('‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ' + lotsToInsert.size() + ' –∑–∞–ø–∏—Å—ñ–≤ Lot__c');
        } else {
            System.debug('‚ÑπÔ∏è –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.');
        }
    }

    global void finish(Database.BatchableContext context) {
        System.debug('üèÅ [FINISH] –ú—ñ–≥—Ä–∞—Ü—ñ—è ProductionLot ‚Üí Lot –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ.');
    }

    public static void FakeCoverageMethod() {
        Integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}